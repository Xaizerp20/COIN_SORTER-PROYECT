
Proyecto final Micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800482c  0800482c  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004834  08004834  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800483c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000404  08004c40  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08004c40  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001013b  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a4  00000000  00000000  0003056f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00032618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221f2  00000000  00000000  00034070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff8f  00000000  00000000  00056262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d106a  00000000  00000000  000661f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013725b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b4  00000000  00000000  001372b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000404 	.word	0x20000404
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080046b0 	.word	0x080046b0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000408 	.word	0x20000408
 8000200:	080046b0 	.word	0x080046b0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <delay>:
#define timer htim2


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <delay+0x30>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800050e:	bf00      	nop
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <delay+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3f9      	bcc.n	8000510 <delay+0x14>
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000514 	.word	0x20000514

08000530 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	2101      	movs	r1, #1
 8000544:	4820      	ldr	r0, [pc, #128]	; (80005c8 <send_to_lcd+0x98>)
 8000546:	f001 ff7f 	bl	8002448 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	08db      	lsrs	r3, r3, #3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055c:	481a      	ldr	r0, [pc, #104]	; (80005c8 <send_to_lcd+0x98>)
 800055e:	f001 ff73 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	089b      	lsrs	r3, r3, #2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	4815      	ldr	r0, [pc, #84]	; (80005c8 <send_to_lcd+0x98>)
 8000574:	f001 ff68 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	085b      	lsrs	r3, r3, #1
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	2140      	movs	r1, #64	; 0x40
 8000588:	480f      	ldr	r0, [pc, #60]	; (80005c8 <send_to_lcd+0x98>)
 800058a:	f001 ff5d 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	461a      	mov	r2, r3
 8000598:	2120      	movs	r1, #32
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <send_to_lcd+0x98>)
 800059c:	f001 ff54 	bl	8002448 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4808      	ldr	r0, [pc, #32]	; (80005c8 <send_to_lcd+0x98>)
 80005a6:	f001 ff4f 	bl	8002448 <HAL_GPIO_WritePin>
	delay (20);
 80005aa:	2014      	movs	r0, #20
 80005ac:	f7ff ffa6 	bl	80004fc <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <send_to_lcd+0x98>)
 80005b6:	f001 ff47 	bl	8002448 <HAL_GPIO_WritePin>
	delay (20);
 80005ba:	2014      	movs	r0, #20
 80005bc:	f7ff ff9e 	bl	80004fc <delay>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020800 	.word	0x40020800

080005cc <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	091b      	lsrs	r3, r3, #4
 80005da:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffa5 	bl	8000530 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	f003 030f 	and.w	r3, r3, #15
 80005ec:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff9c 	bl	8000530 <send_to_lcd>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff8b 	bl	8000530 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f003 030f 	and.w	r3, r3, #15
 8000620:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff82 	bl	8000530 <send_to_lcd>
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <lcd_clear>:

void lcd_clear (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff ffc7 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(2);
 800063e:	2002      	movs	r0, #2
 8000640:	f001 fc20 	bl	8001e84 <HAL_Delay>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
    switch (row)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d003      	beq.n	8000660 <lcd_put_cur+0x18>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d005      	beq.n	800066a <lcd_put_cur+0x22>
 800065e:	e009      	b.n	8000674 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000666:	603b      	str	r3, [r7, #0]
            break;
 8000668:	e004      	b.n	8000674 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000670:	603b      	str	r3, [r7, #0]
            break;
 8000672:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffa7 	bl	80005cc <lcd_send_cmd>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <lcd_init>:


void lcd_init (void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800068a:	2032      	movs	r0, #50	; 0x32
 800068c:	f001 fbfa 	bl	8001e84 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000690:	2030      	movs	r0, #48	; 0x30
 8000692:	f7ff ff9b 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000696:	2005      	movs	r0, #5
 8000698:	f001 fbf4 	bl	8001e84 <HAL_Delay>
	lcd_send_cmd (0x30);
 800069c:	2030      	movs	r0, #48	; 0x30
 800069e:	f7ff ff95 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 fbee 	bl	8001e84 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006a8:	2030      	movs	r0, #48	; 0x30
 80006aa:	f7ff ff8f 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(10);
 80006ae:	200a      	movs	r0, #10
 80006b0:	f001 fbe8 	bl	8001e84 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006b4:	2020      	movs	r0, #32
 80006b6:	f7ff ff89 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f001 fbe2 	bl	8001e84 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006c0:	2028      	movs	r0, #40	; 0x28
 80006c2:	f7ff ff83 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f001 fbdc 	bl	8001e84 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006cc:	2008      	movs	r0, #8
 80006ce:	f7ff ff7d 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f001 fbd6 	bl	8001e84 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff77 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 fbd0 	bl	8001e84 <HAL_Delay>
	HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f001 fbcd 	bl	8001e84 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006ea:	2006      	movs	r0, #6
 80006ec:	f7ff ff6e 	bl	80005cc <lcd_send_cmd>
	HAL_Delay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f001 fbc7 	bl	8001e84 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006f6:	200c      	movs	r0, #12
 80006f8:	f7ff ff68 	bl	80005cc <lcd_send_cmd>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000708:	e006      	b.n	8000718 <lcd_send_string+0x18>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff74 	bl	8000600 <lcd_send_data>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f4      	bne.n	800070a <lcd_send_string+0xa>
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <stepper_pines_iz>:
	  HAL_Delay(1);
	}


void stepper_pines_iz()//ESTE VOID SON LOS PINES DE MOVIMIENTO A LA IZQUIERDA DEL STEPPER MOTOR
	{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   //IN1
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000736:	4835      	ldr	r0, [pc, #212]	; (800080c <stepper_pines_iz+0xe0>)
 8000738:	f001 fe86 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);  //IN2
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000742:	4832      	ldr	r0, [pc, #200]	; (800080c <stepper_pines_iz+0xe0>)
 8000744:	f001 fe80 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);  //IN3
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074e:	482f      	ldr	r0, [pc, #188]	; (800080c <stepper_pines_iz+0xe0>)
 8000750:	f001 fe7a 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);  //IN4
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075a:	482c      	ldr	r0, [pc, #176]	; (800080c <stepper_pines_iz+0xe0>)
 800075c:	f001 fe74 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000760:	2005      	movs	r0, #5
 8000762:	f001 fb8f 	bl	8001e84 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   //IN1
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076c:	4827      	ldr	r0, [pc, #156]	; (800080c <stepper_pines_iz+0xe0>)
 800076e:	f001 fe6b 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);  //IN2
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	4824      	ldr	r0, [pc, #144]	; (800080c <stepper_pines_iz+0xe0>)
 800077a:	f001 fe65 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);  //IN3
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000784:	4821      	ldr	r0, [pc, #132]	; (800080c <stepper_pines_iz+0xe0>)
 8000786:	f001 fe5f 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);  //IN4
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	481e      	ldr	r0, [pc, #120]	; (800080c <stepper_pines_iz+0xe0>)
 8000792:	f001 fe59 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000796:	2005      	movs	r0, #5
 8000798:	f001 fb74 	bl	8001e84 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   //IN1
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a2:	481a      	ldr	r0, [pc, #104]	; (800080c <stepper_pines_iz+0xe0>)
 80007a4:	f001 fe50 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);  //IN2
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <stepper_pines_iz+0xe0>)
 80007b0:	f001 fe4a 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);  //IN3
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ba:	4814      	ldr	r0, [pc, #80]	; (800080c <stepper_pines_iz+0xe0>)
 80007bc:	f001 fe44 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);  //IN4
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c6:	4811      	ldr	r0, [pc, #68]	; (800080c <stepper_pines_iz+0xe0>)
 80007c8:	f001 fe3e 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 80007cc:	2005      	movs	r0, #5
 80007ce:	f001 fb59 	bl	8001e84 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   //IN1
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <stepper_pines_iz+0xe0>)
 80007da:	f001 fe35 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);  //IN2
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <stepper_pines_iz+0xe0>)
 80007e6:	f001 fe2f 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);  //IN3
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <stepper_pines_iz+0xe0>)
 80007f2:	f001 fe29 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);  //IN4
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <stepper_pines_iz+0xe0>)
 80007fe:	f001 fe23 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000802:	2005      	movs	r0, #5
 8000804:	f001 fb3e 	bl	8001e84 <HAL_Delay>
	}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020800 	.word	0x40020800

08000810 <stepper_pines_der>:


void stepper_pines_der() //ESTE VOID SON LOS PINES DE MOVIMIENTO A LA DERECHA DEL STEPPER MOTOR
	{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   //IN1
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081a:	4835      	ldr	r0, [pc, #212]	; (80008f0 <stepper_pines_der+0xe0>)
 800081c:	f001 fe14 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);  //IN2
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000826:	4832      	ldr	r0, [pc, #200]	; (80008f0 <stepper_pines_der+0xe0>)
 8000828:	f001 fe0e 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);  //IN3
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000832:	482f      	ldr	r0, [pc, #188]	; (80008f0 <stepper_pines_der+0xe0>)
 8000834:	f001 fe08 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);  //IN4
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083e:	482c      	ldr	r0, [pc, #176]	; (80008f0 <stepper_pines_der+0xe0>)
 8000840:	f001 fe02 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000844:	2005      	movs	r0, #5
 8000846:	f001 fb1d 	bl	8001e84 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   //IN1
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000850:	4827      	ldr	r0, [pc, #156]	; (80008f0 <stepper_pines_der+0xe0>)
 8000852:	f001 fdf9 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);  //IN2
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4824      	ldr	r0, [pc, #144]	; (80008f0 <stepper_pines_der+0xe0>)
 800085e:	f001 fdf3 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);  //IN3
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000868:	4821      	ldr	r0, [pc, #132]	; (80008f0 <stepper_pines_der+0xe0>)
 800086a:	f001 fded 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);  //IN4
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000874:	481e      	ldr	r0, [pc, #120]	; (80008f0 <stepper_pines_der+0xe0>)
 8000876:	f001 fde7 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 800087a:	2005      	movs	r0, #5
 800087c:	f001 fb02 	bl	8001e84 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   //IN1
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	481a      	ldr	r0, [pc, #104]	; (80008f0 <stepper_pines_der+0xe0>)
 8000888:	f001 fdde 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);  //IN2
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000892:	4817      	ldr	r0, [pc, #92]	; (80008f0 <stepper_pines_der+0xe0>)
 8000894:	f001 fdd8 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);  //IN3
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <stepper_pines_der+0xe0>)
 80008a0:	f001 fdd2 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);  //IN4
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <stepper_pines_der+0xe0>)
 80008ac:	f001 fdcc 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 80008b0:	2005      	movs	r0, #5
 80008b2:	f001 fae7 	bl	8001e84 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   //IN1
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <stepper_pines_der+0xe0>)
 80008be:	f001 fdc3 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);  //IN2
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c8:	4809      	ldr	r0, [pc, #36]	; (80008f0 <stepper_pines_der+0xe0>)
 80008ca:	f001 fdbd 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);  //IN3
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <stepper_pines_der+0xe0>)
 80008d6:	f001 fdb7 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);  //IN4
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <stepper_pines_der+0xe0>)
 80008e2:	f001 fdb1 	bl	8002448 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 80008e6:	2005      	movs	r0, #5
 80008e8:	f001 facc 	bl	8001e84 <HAL_Delay>
	}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40020800 	.word	0x40020800

080008f4 <pineskey>:


void pineskey()	//ESTE VOID SON LOS PINES DE SALIDA DEL KEYPAD
	{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	4819      	ldr	r0, [pc, #100]	; (8000964 <pineskey+0x70>)
 80008fe:	f001 fda3 	bl	8002448 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1);
 8000902:	2001      	movs	r0, #1
 8000904:	f001 fabe 	bl	8001e84 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2101      	movs	r1, #1
 800090c:	4815      	ldr	r0, [pc, #84]	; (8000964 <pineskey+0x70>)
 800090e:	f001 fd9b 	bl	8002448 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2102      	movs	r1, #2
 8000916:	4813      	ldr	r0, [pc, #76]	; (8000964 <pineskey+0x70>)
 8000918:	f001 fd96 	bl	8002448 <HAL_GPIO_WritePin>
	 	  HAL_Delay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f001 fab1 	bl	8001e84 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	480f      	ldr	r0, [pc, #60]	; (8000964 <pineskey+0x70>)
 8000928:	f001 fd8e 	bl	8002448 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2110      	movs	r1, #16
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <pineskey+0x70>)
 8000932:	f001 fd89 	bl	8002448 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1);
 8000936:	2001      	movs	r0, #1
 8000938:	f001 faa4 	bl	8001e84 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2110      	movs	r1, #16
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <pineskey+0x70>)
 8000942:	f001 fd81 	bl	8002448 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2120      	movs	r1, #32
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <pineskey+0x70>)
 800094c:	f001 fd7c 	bl	8002448 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f001 fa97 	bl	8001e84 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2120      	movs	r1, #32
 800095a:	4802      	ldr	r0, [pc, #8]	; (8000964 <pineskey+0x70>)
 800095c:	f001 fd74 	bl	8002448 <HAL_GPIO_WritePin>
	}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40020400 	.word	0x40020400

08000968 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) //ESTA FUNCION SON LAS SALIDAS DEL KEYPAD
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000972:	2101      	movs	r1, #1
 8000974:	4864      	ldr	r0, [pc, #400]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000976:	f001 fd4f 	bl	8002418 <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d02c      	beq.n	80009da <HAL_GPIO_EXTI_Callback+0x72>
		{
		press++;
 8000980:	4b62      	ldr	r3, [pc, #392]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a61      	ldr	r2, [pc, #388]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000988:	6013      	str	r3, [r2, #0]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 800098a:	2101      	movs	r1, #1
 800098c:	4860      	ldr	r0, [pc, #384]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800098e:	f001 fd43 	bl	8002418 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <HAL_GPIO_EXTI_Callback+0x36>
		{
			key = 1;
 8000998:	4b5e      	ldr	r3, [pc, #376]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 800099e:	2102      	movs	r1, #2
 80009a0:	485b      	ldr	r0, [pc, #364]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80009a2:	f001 fd39 	bl	8002418 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <HAL_GPIO_EXTI_Callback+0x4a>
		{
			key = 4;
 80009ac:	4b59      	ldr	r3, [pc, #356]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	601a      	str	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80009b2:	2110      	movs	r1, #16
 80009b4:	4856      	ldr	r0, [pc, #344]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80009b6:	f001 fd2f 	bl	8002418 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <HAL_GPIO_EXTI_Callback+0x5e>
		{
			key = 7;
 80009c0:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	601a      	str	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80009c6:	2120      	movs	r1, #32
 80009c8:	4851      	ldr	r0, [pc, #324]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80009ca:	f001 fd25 	bl	8002418 <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <HAL_GPIO_EXTI_Callback+0x72>
		{
			key = 10;
 80009d4:	4b4f      	ldr	r3, [pc, #316]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80009d6:	220a      	movs	r2, #10
 80009d8:	601a      	str	r2, [r3, #0]
		}
	}



	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80009da:	2102      	movs	r1, #2
 80009dc:	484a      	ldr	r0, [pc, #296]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80009de:	f001 fd1b 	bl	8002418 <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d02c      	beq.n	8000a42 <HAL_GPIO_EXTI_Callback+0xda>
		{
		press++;
 80009e8:	4b48      	ldr	r3, [pc, #288]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x1a4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a47      	ldr	r2, [pc, #284]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x1a4>)
 80009f0:	6013      	str	r3, [r2, #0]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 80009f2:	2101      	movs	r1, #1
 80009f4:	4846      	ldr	r0, [pc, #280]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80009f6:	f001 fd0f 	bl	8002418 <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <HAL_GPIO_EXTI_Callback+0x9e>
		{
			key = 2;
 8000a00:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 8000a06:	2102      	movs	r1, #2
 8000a08:	4841      	ldr	r0, [pc, #260]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000a0a:	f001 fd05 	bl	8002418 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <HAL_GPIO_EXTI_Callback+0xb2>
		{
			key = 5;
 8000a14:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000a16:	2205      	movs	r2, #5
 8000a18:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	483c      	ldr	r0, [pc, #240]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000a1e:	f001 fcfb 	bl	8002418 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d002      	beq.n	8000a2e <HAL_GPIO_EXTI_Callback+0xc6>
		{
			key = 8;
 8000a28:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8000a2e:	2120      	movs	r1, #32
 8000a30:	4837      	ldr	r0, [pc, #220]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000a32:	f001 fcf1 	bl	8002418 <HAL_GPIO_ReadPin>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <HAL_GPIO_EXTI_Callback+0xda>
		{
			key = 0;
 8000a3c:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]

	}



	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 8000a42:	2110      	movs	r1, #16
 8000a44:	4830      	ldr	r0, [pc, #192]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000a46:	f001 fce7 	bl	8002418 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d027      	beq.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x138>
		{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8000a50:	2101      	movs	r1, #1
 8000a52:	482f      	ldr	r0, [pc, #188]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000a54:	f001 fce0 	bl	8002418 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <HAL_GPIO_EXTI_Callback+0xfc>
		{
			key = 3;
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000a60:	2203      	movs	r2, #3
 8000a62:	601a      	str	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 8000a64:	2102      	movs	r1, #2
 8000a66:	482a      	ldr	r0, [pc, #168]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000a68:	f001 fcd6 	bl	8002418 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <HAL_GPIO_EXTI_Callback+0x110>
		{
			key = 6;
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000a74:	2206      	movs	r2, #6
 8000a76:	601a      	str	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8000a78:	2110      	movs	r1, #16
 8000a7a:	4825      	ldr	r0, [pc, #148]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000a7c:	f001 fccc 	bl	8002418 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <HAL_GPIO_EXTI_Callback+0x124>
		{
			key = 9;
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000a88:	2209      	movs	r2, #9
 8000a8a:	601a      	str	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4820      	ldr	r0, [pc, #128]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000a90:	f001 fcc2 	bl	8002418 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x138>
		{
			add = 1;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
		}
	}


	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	4819      	ldr	r0, [pc, #100]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000aa4:	f001 fcb8 	bl	8002418 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d027      	beq.n	8000afe <HAL_GPIO_EXTI_Callback+0x196>
		{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4817      	ldr	r0, [pc, #92]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ab2:	f001 fcb1 	bl	8002418 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x15a>
		{
			op = 1;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ac6:	f001 fca7 	bl	8002418 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <HAL_GPIO_EXTI_Callback+0x16e>
		{
			op = 2;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ada:	f001 fc9d 	bl	8002418 <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <HAL_GPIO_EXTI_Callback+0x182>
		{
			op = 3;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8000aea:	2120      	movs	r1, #32
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000aee:	f001 fc93 	bl	8002418 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <HAL_GPIO_EXTI_Callback+0x196>
		{
			op = 4;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	601a      	str	r2, [r3, #0]

		}

	}

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	20000420 	.word	0x20000420
 8000b10:	40020400 	.word	0x40020400
 8000b14:	20000424 	.word	0x20000424
 8000b18:	20000438 	.word	0x20000438
 8000b1c:	20000428 	.word	0x20000428

08000b20 <org>:


void org() //ESTE VOID PERMITE QUE EL MOTOR SE POSICIONE Y MUESTRE ORGANIZANDO EN LA PANTALLA

	{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	stepper_pines_iz();
 8000b24:	f7ff fe02 	bl	800072c <stepper_pines_iz>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <org+0x3c>)
 8000b2e:	f001 fca4 	bl	800247a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	4809      	ldr	r0, [pc, #36]	; (8000b5c <org+0x3c>)
 8000b38:	f001 fc9f 	bl	800247a <HAL_GPIO_TogglePin>
	lcd_clear();
 8000b3c:	f7ff fd7a 	bl	8000634 <lcd_clear>
	lcd_put_cur(0, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff fd80 	bl	8000648 <lcd_put_cur>
	lcd_send_string("Organizando...");
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <org+0x40>)
 8000b4a:	f7ff fdd9 	bl	8000700 <lcd_send_string>
	write_char (24 ,1);
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2018      	movs	r0, #24
 8000b52:	f000 feed 	bl	8001930 <write_char>
	}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	080046c8 	.word	0x080046c8

08000b64 <intro>:
		  //TAMBIEN ACTIVA EL LED ROJO Y EL BUZZER

void intro() //ESTE VOID MUESTRA EL MENSAJE INTRODUZCA LA MONEDA EN EL LCD
	{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <intro+0x48>)
 8000b70:	f001 fc6a 	bl	8002448 <HAL_GPIO_WritePin>
		lcd_clear();
 8000b74:	f7ff fd5e 	bl	8000634 <lcd_clear>
		lcd_put_cur(0, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fd64 	bl	8000648 <lcd_put_cur>
		lcd_send_string("Introduzca la");
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <intro+0x4c>)
 8000b82:	f7ff fdbd 	bl	8000700 <lcd_send_string>
		lcd_put_cur(1, 4);
 8000b86:	2104      	movs	r1, #4
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff fd5d 	bl	8000648 <lcd_put_cur>
		lcd_send_string("moneda");
 8000b8e:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <intro+0x50>)
 8000b90:	f7ff fdb6 	bl	8000700 <lcd_send_string>
			HAL_Delay(3000);
 8000b94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b98:	f001 f974 	bl	8001e84 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <intro+0x48>)
 8000ba4:	f001 fc50 	bl	8002448 <HAL_GPIO_WritePin>
	}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	080046d8 	.word	0x080046d8
 8000bb4:	080046e8 	.word	0x080046e8

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f001 f8ef 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 fb3d 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 fcc5 	bl	8001554 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 fc99 	bl	8001500 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000bce:	f000 fc4b 	bl	8001468 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000bd2:	f000 fba7 	bl	8001324 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4895      	ldr	r0, [pc, #596]	; (8000e30 <main+0x278>)
 8000bda:	f002 fb4d 	bl	8003278 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8000bde:	4895      	ldr	r0, [pc, #596]	; (8000e34 <main+0x27c>)
 8000be0:	f002 fa88 	bl	80030f4 <HAL_TIM_Base_Start>


  max_init (0x03);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 ff0b 	bl	8001a00 <max_init>
  lcd_init ();
 8000bea:	f7ff fd4c 	bl	8000686 <lcd_init>

  lcd_send_string ("Proyecto Final");
 8000bee:	4892      	ldr	r0, [pc, #584]	; (8000e38 <main+0x280>)
 8000bf0:	f7ff fd86 	bl	8000700 <lcd_send_string>
  write_char ('$' ,1);
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2024      	movs	r0, #36	; 0x24
 8000bf8:	f000 fe9a 	bl	8001930 <write_char>


  HAL_Delay(3000);
 8000bfc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c00:	f001 f940 	bl	8001e84 <HAL_Delay>

  max_clear();
 8000c04:	f000 fece 	bl	80019a4 <max_clear>
  lcd_clear();
 8000c08:	f7ff fd14 	bl	8000634 <lcd_clear>
/* USER CODE BEGIN WHILE */
while (1)
{


	  pineskey();
 8000c0c:	f7ff fe72 	bl	80008f4 <pineskey>
	  HAL_Delay(100);
 8000c10:	2064      	movs	r0, #100	; 0x64
 8000c12:	f001 f937 	bl	8001e84 <HAL_Delay>


	itoa(total,string3,10);
 8000c16:	4b89      	ldr	r3, [pc, #548]	; (8000e3c <main+0x284>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	4988      	ldr	r1, [pc, #544]	; (8000e40 <main+0x288>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fcfa 	bl	8004618 <itoa>
	itoa(dinero,string4,10);
 8000c24:	4b87      	ldr	r3, [pc, #540]	; (8000e44 <main+0x28c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	220a      	movs	r2, #10
 8000c2a:	4987      	ldr	r1, [pc, #540]	; (8000e48 <main+0x290>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fcf3 	bl	8004618 <itoa>


	switch(op)
 8000c32:	4b86      	ldr	r3, [pc, #536]	; (8000e4c <main+0x294>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	f200 8225 	bhi.w	8001086 <main+0x4ce>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <main+0x8c>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000ce3 	.word	0x08000ce3
 8000c4c:	08000e85 	.word	0x08000e85
 8000c50:	08000f45 	.word	0x08000f45
 8000c54:	08000f7f 	.word	0x08000f7f
	{
	case 0:

		  max_clear();
 8000c58:	f000 fea4 	bl	80019a4 <max_clear>
		  lcd_clear();
 8000c5c:	f7ff fcea 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fcf0 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("A. Introducir");
 8000c68:	4879      	ldr	r0, [pc, #484]	; (8000e50 <main+0x298>)
 8000c6a:	f7ff fd49 	bl	8000700 <lcd_send_string>
		  lcd_put_cur(1, 2);
 8000c6e:	2102      	movs	r1, #2
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fce9 	bl	8000648 <lcd_put_cur>
		  lcd_send_string(" moneda");
 8000c76:	4877      	ldr	r0, [pc, #476]	; (8000e54 <main+0x29c>)
 8000c78:	f7ff fd42 	bl	8000700 <lcd_send_string>
		  HAL_Delay(1000);
 8000c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c80:	f001 f900 	bl	8001e84 <HAL_Delay>

		  lcd_clear();
 8000c84:	f7ff fcd6 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fcdc 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("B. Ver cantidad ");
 8000c90:	4871      	ldr	r0, [pc, #452]	; (8000e58 <main+0x2a0>)
 8000c92:	f7ff fd35 	bl	8000700 <lcd_send_string>
		  lcd_put_cur(1, 2);
 8000c96:	2102      	movs	r1, #2
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fcd5 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("  total");
 8000c9e:	486f      	ldr	r0, [pc, #444]	; (8000e5c <main+0x2a4>)
 8000ca0:	f7ff fd2e 	bl	8000700 <lcd_send_string>
		  HAL_Delay(1000);
 8000ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca8:	f001 f8ec 	bl	8001e84 <HAL_Delay>

		  lcd_clear();
 8000cac:	f7ff fcc2 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff fcc8 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("C. Dinero total ");
 8000cb8:	4869      	ldr	r0, [pc, #420]	; (8000e60 <main+0x2a8>)
 8000cba:	f7ff fd21 	bl	8000700 <lcd_send_string>
		  HAL_Delay(1000);
 8000cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc2:	f001 f8df 	bl	8001e84 <HAL_Delay>

		  lcd_clear();
 8000cc6:	f7ff fcb5 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fcbb 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("D. Mantenimiento");
 8000cd2:	4864      	ldr	r0, [pc, #400]	; (8000e64 <main+0x2ac>)
 8000cd4:	f7ff fd14 	bl	8000700 <lcd_send_string>
		  HAL_Delay(1000);
 8000cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cdc:	f001 f8d2 	bl	8001e84 <HAL_Delay>
		  break;
 8000ce0:	e1d1      	b.n	8001086 <main+0x4ce>

	case 1:
		//ESTA PARTE PERMITE SABER CUANTAS MONEDAS HAY DE CADA TIPO Y PERMITE HACER GIRAR EL MOTOR

				//PARA QUE EL PROGRAMA SE POSICIONE EN EL REGLON DE 1 PESO
					if(num1 == 1 && add == 1 && num3 == 0)
 8000ce2:	4b61      	ldr	r3, [pc, #388]	; (8000e68 <main+0x2b0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d111      	bne.n	8000d0e <main+0x156>
 8000cea:	4b60      	ldr	r3, [pc, #384]	; (8000e6c <main+0x2b4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10d      	bne.n	8000d0e <main+0x156>
 8000cf2:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <main+0x2b8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d109      	bne.n	8000d0e <main+0x156>
						{
						m1++;
 8000cfa:	4b5e      	ldr	r3, [pc, #376]	; (8000e74 <main+0x2bc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a5c      	ldr	r2, [pc, #368]	; (8000e74 <main+0x2bc>)
 8000d02:	6013      	str	r3, [r2, #0]
						total++;
 8000d04:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <main+0x284>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <main+0x284>)
 8000d0c:	6013      	str	r3, [r2, #0]
						}

				//PARA QUE EL PROGRAMA SE POSICIONE EN EL REGLON DE 5 PESOS
					if(num1 == 5 && add ==1)
 8000d0e:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <main+0x2b0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b05      	cmp	r3, #5
 8000d14:	d12b      	bne.n	8000d6e <main+0x1b6>
 8000d16:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <main+0x2b4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d127      	bne.n	8000d6e <main+0x1b6>
						{
						for(int ciclo=0; ciclo<110; ciclo++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e004      	b.n	8000d2e <main+0x176>
							{
							org();
 8000d24:	f7ff fefc 	bl	8000b20 <org>
						for(int ciclo=0; ciclo<110; ciclo++)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2b6d      	cmp	r3, #109	; 0x6d
 8000d32:	ddf7      	ble.n	8000d24 <main+0x16c>
							}

							intro();
 8000d34:	f7ff ff16 	bl	8000b64 <intro>


						for(int ciclo=0; ciclo<110; ciclo++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	e008      	b.n	8000d50 <main+0x198>
								  		{
										stepper_pines_der();
 8000d3e:	f7ff fd67 	bl	8000810 <stepper_pines_der>
										write_char (25 ,1);
 8000d42:	2101      	movs	r1, #1
 8000d44:	2019      	movs	r0, #25
 8000d46:	f000 fdf3 	bl	8001930 <write_char>
						for(int ciclo=0; ciclo<110; ciclo++)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	2b6d      	cmp	r3, #109	; 0x6d
 8000d54:	ddf3      	ble.n	8000d3e <main+0x186>
								  		}
						max_clear();
 8000d56:	f000 fe25 	bl	80019a4 <max_clear>
						m2++;
 8000d5a:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <main+0x2c0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <main+0x2c0>)
 8000d62:	6013      	str	r3, [r2, #0]
						total++;
 8000d64:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <main+0x284>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a34      	ldr	r2, [pc, #208]	; (8000e3c <main+0x284>)
 8000d6c:	6013      	str	r3, [r2, #0]




				//PARA QUE EL PROGRAMA SE POSICIONE EN EL REGLON DE 10 PESOS
				  if(num3 == 10 && add ==1)
 8000d6e:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <main+0x2b8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b0a      	cmp	r3, #10
 8000d74:	d129      	bne.n	8000dca <main+0x212>
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <main+0x2b4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d125      	bne.n	8000dca <main+0x212>
						{
				  	for(int ciclo=0; ciclo<220; ciclo++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	e004      	b.n	8000d8e <main+0x1d6>
				  		{
				  		org();
 8000d84:	f7ff fecc 	bl	8000b20 <org>
				  	for(int ciclo=0; ciclo<220; ciclo++)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2bdb      	cmp	r3, #219	; 0xdb
 8000d92:	ddf7      	ble.n	8000d84 <main+0x1cc>
				  		}
				  	intro();
 8000d94:	f7ff fee6 	bl	8000b64 <intro>


				  		for(int ciclo=0; ciclo<220; ciclo++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	e008      	b.n	8000db0 <main+0x1f8>
				  				  		{
				  						stepper_pines_der();
 8000d9e:	f7ff fd37 	bl	8000810 <stepper_pines_der>
				  						write_char (25 ,1);
 8000da2:	2101      	movs	r1, #1
 8000da4:	2019      	movs	r0, #25
 8000da6:	f000 fdc3 	bl	8001930 <write_char>
				  		for(int ciclo=0; ciclo<220; ciclo++)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2bdb      	cmp	r3, #219	; 0xdb
 8000db4:	ddf3      	ble.n	8000d9e <main+0x1e6>
				  				  		}

						m3++;
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <main+0x2c4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <main+0x2c4>)
 8000dbe:	6013      	str	r3, [r2, #0]
						total++;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <main+0x284>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <main+0x284>)
 8000dc8:	6013      	str	r3, [r2, #0]
						}

				//PARA QUE EL PROGRAMA SE POSICIONE EN EL REGLON DE 25 PESOS
				  if(num3 == 25 && add ==1)
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <main+0x2b8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b19      	cmp	r3, #25
 8000dd0:	f040 8126 	bne.w	8001020 <main+0x468>
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <main+0x2b4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	f040 8121 	bne.w	8001020 <main+0x468>
						{
				  	for(int ciclo=0; ciclo<360; ciclo++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	e004      	b.n	8000dee <main+0x236>
							{
							org();
 8000de4:	f7ff fe9c 	bl	8000b20 <org>
				  	for(int ciclo=0; ciclo<360; ciclo++)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3301      	adds	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000df4:	dbf6      	blt.n	8000de4 <main+0x22c>
							}

							intro();
 8000df6:	f7ff feb5 	bl	8000b64 <intro>


				  		for(int ciclo=0; ciclo<360; ciclo++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	e008      	b.n	8000e12 <main+0x25a>
				  				  		{
				  						stepper_pines_der();
 8000e00:	f7ff fd06 	bl	8000810 <stepper_pines_der>
				  						write_char (25 ,1);
 8000e04:	2101      	movs	r1, #1
 8000e06:	2019      	movs	r0, #25
 8000e08:	f000 fd92 	bl	8001930 <write_char>
				  		for(int ciclo=0; ciclo<360; ciclo++)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000e18:	dbf2      	blt.n	8000e00 <main+0x248>
				  				  		}
						m4++;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <main+0x2c8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <main+0x2c8>)
 8000e22:	6013      	str	r3, [r2, #0]
						total++;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <main+0x284>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <main+0x284>)
 8000e2c:	6013      	str	r3, [r2, #0]
						}

				  	break;
 8000e2e:	e0f7      	b.n	8001020 <main+0x468>
 8000e30:	200004cc 	.word	0x200004cc
 8000e34:	20000514 	.word	0x20000514
 8000e38:	080046f0 	.word	0x080046f0
 8000e3c:	2000043c 	.word	0x2000043c
 8000e40:	200005a0 	.word	0x200005a0
 8000e44:	20000440 	.word	0x20000440
 8000e48:	200004a4 	.word	0x200004a4
 8000e4c:	20000428 	.word	0x20000428
 8000e50:	08004700 	.word	0x08004700
 8000e54:	08004710 	.word	0x08004710
 8000e58:	08004718 	.word	0x08004718
 8000e5c:	0800472c 	.word	0x0800472c
 8000e60:	08004734 	.word	0x08004734
 8000e64:	08004748 	.word	0x08004748
 8000e68:	2000042c 	.word	0x2000042c
 8000e6c:	20000438 	.word	0x20000438
 8000e70:	20000434 	.word	0x20000434
 8000e74:	20000444 	.word	0x20000444
 8000e78:	20000448 	.word	0x20000448
 8000e7c:	2000044c 	.word	0x2000044c
 8000e80:	20000450 	.word	0x20000450


	case 2:

		if(add == 0)
 8000e84:	4b68      	ldr	r3, [pc, #416]	; (8001028 <main+0x470>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f040 80cb 	bne.w	8001024 <main+0x46c>
			{
		  pineskey();
 8000e8e:	f7ff fd31 	bl	80008f4 <pineskey>
		  lcd_clear();
 8000e92:	f7ff fbcf 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fbd5 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("monedas total:");
 8000e9e:	4863      	ldr	r0, [pc, #396]	; (800102c <main+0x474>)
 8000ea0:	f7ff fc2e 	bl	8000700 <lcd_send_string>
		  lcd_send_string(string3);
 8000ea4:	4862      	ldr	r0, [pc, #392]	; (8001030 <main+0x478>)
 8000ea6:	f7ff fc2b 	bl	8000700 <lcd_send_string>
		  HAL_Delay(2000);
 8000eaa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eae:	f000 ffe9 	bl	8001e84 <HAL_Delay>

		  pineskey();
 8000eb2:	f7ff fd1f 	bl	80008f4 <pineskey>
		  lcd_clear();
 8000eb6:	f7ff fbbd 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fbc3 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("monedas de 1: ");
 8000ec2:	485c      	ldr	r0, [pc, #368]	; (8001034 <main+0x47c>)
 8000ec4:	f7ff fc1c 	bl	8000700 <lcd_send_string>
		  lcd_send_string(string5);
 8000ec8:	485b      	ldr	r0, [pc, #364]	; (8001038 <main+0x480>)
 8000eca:	f7ff fc19 	bl	8000700 <lcd_send_string>
		  HAL_Delay(2000);
 8000ece:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ed2:	f000 ffd7 	bl	8001e84 <HAL_Delay>

		  pineskey();
 8000ed6:	f7ff fd0d 	bl	80008f4 <pineskey>
		  lcd_clear();
 8000eda:	f7ff fbab 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fbb1 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("monedas de 5: ");
 8000ee6:	4855      	ldr	r0, [pc, #340]	; (800103c <main+0x484>)
 8000ee8:	f7ff fc0a 	bl	8000700 <lcd_send_string>
		  lcd_send_string(string6);
 8000eec:	4854      	ldr	r0, [pc, #336]	; (8001040 <main+0x488>)
 8000eee:	f7ff fc07 	bl	8000700 <lcd_send_string>
		  HAL_Delay(2000);
 8000ef2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef6:	f000 ffc5 	bl	8001e84 <HAL_Delay>

		  pineskey();
 8000efa:	f7ff fcfb 	bl	80008f4 <pineskey>
		  lcd_clear();
 8000efe:	f7ff fb99 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000f02:	2100      	movs	r1, #0
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fb9f 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("monedas de 10: ");
 8000f0a:	484e      	ldr	r0, [pc, #312]	; (8001044 <main+0x48c>)
 8000f0c:	f7ff fbf8 	bl	8000700 <lcd_send_string>
		  lcd_send_string(string7);
 8000f10:	484d      	ldr	r0, [pc, #308]	; (8001048 <main+0x490>)
 8000f12:	f7ff fbf5 	bl	8000700 <lcd_send_string>
		  HAL_Delay(2000);
 8000f16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f1a:	f000 ffb3 	bl	8001e84 <HAL_Delay>

		  pineskey();
 8000f1e:	f7ff fce9 	bl	80008f4 <pineskey>
		  lcd_clear();
 8000f22:	f7ff fb87 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fb8d 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("monedas de 25: ");
 8000f2e:	4847      	ldr	r0, [pc, #284]	; (800104c <main+0x494>)
 8000f30:	f7ff fbe6 	bl	8000700 <lcd_send_string>
		  lcd_send_string(string8);
 8000f34:	4846      	ldr	r0, [pc, #280]	; (8001050 <main+0x498>)
 8000f36:	f7ff fbe3 	bl	8000700 <lcd_send_string>
		  HAL_Delay(2000);
 8000f3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f3e:	f000 ffa1 	bl	8001e84 <HAL_Delay>
			}
		  break;
 8000f42:	e06f      	b.n	8001024 <main+0x46c>

	case 3:

		if(add == 0)
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <main+0x470>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f040 809b 	bne.w	8001084 <main+0x4cc>
			{
		  lcd_clear();
 8000f4e:	f7ff fb71 	bl	8000634 <lcd_clear>
		  lcd_put_cur(0, 0);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fb77 	bl	8000648 <lcd_put_cur>
		  lcd_send_string("Dinero total: ");
 8000f5a:	483e      	ldr	r0, [pc, #248]	; (8001054 <main+0x49c>)
 8000f5c:	f7ff fbd0 	bl	8000700 <lcd_send_string>
		  lcd_put_cur(1, 2);
 8000f60:	2102      	movs	r1, #2
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff fb70 	bl	8000648 <lcd_put_cur>
		  lcd_send_string(string4);
 8000f68:	483b      	ldr	r0, [pc, #236]	; (8001058 <main+0x4a0>)
 8000f6a:	f7ff fbc9 	bl	8000700 <lcd_send_string>
		  lcd_send_string(" pesos");
 8000f6e:	483b      	ldr	r0, [pc, #236]	; (800105c <main+0x4a4>)
 8000f70:	f7ff fbc6 	bl	8000700 <lcd_send_string>
		  HAL_Delay(1000);
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	f000 ff84 	bl	8001e84 <HAL_Delay>
			}
		  break;
 8000f7c:	e082      	b.n	8001084 <main+0x4cc>

	case 4:

		switch(add)
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <main+0x470>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <main+0x3d4>
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d034      	beq.n	8000ff4 <main+0x43c>
 8000f8a:	e07c      	b.n	8001086 <main+0x4ce>
			{
			case 0:
				  htim1.Instance->CCR2 = 50;  // duty cycle is 1.5 ms
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <main+0x4a8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2232      	movs	r2, #50	; 0x32
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38
				  HAL_Delay(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f98:	f000 ff74 	bl	8001e84 <HAL_Delay>
				  htim1.Instance->CCR2 = 125;  // duty cycle is .5 ms
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <main+0x4a8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	227d      	movs	r2, #125	; 0x7d
 8000fa2:	639a      	str	r2, [r3, #56]	; 0x38
				  HAL_Delay(1000);
 8000fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa8:	f000 ff6c 	bl	8001e84 <HAL_Delay>
				  htim1.Instance->CCR2 = 175;  // duty cycle is 2.5 ms
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <main+0x4a8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	22af      	movs	r2, #175	; 0xaf
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38
				  HAL_Delay(1000);
 8000fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb8:	f000 ff64 	bl	8001e84 <HAL_Delay>
				  htim1.Instance->CCR2 = 100;  // duty cycle is .5 ms
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <main+0x4a8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2264      	movs	r2, #100	; 0x64
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
				  HAL_Delay(1000);
 8000fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc8:	f000 ff5c 	bl	8001e84 <HAL_Delay>



					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	4824      	ldr	r0, [pc, #144]	; (8001064 <main+0x4ac>)
 8000fd4:	f001 fa38 	bl	8002448 <HAL_GPIO_WritePin>
					lcd_clear();
 8000fd8:	f7ff fb2c 	bl	8000634 <lcd_clear>
					lcd_put_cur(0, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fb32 	bl	8000648 <lcd_put_cur>
					lcd_send_string("Mantenimiento...");
 8000fe4:	4820      	ldr	r0, [pc, #128]	; (8001068 <main+0x4b0>)
 8000fe6:	f7ff fb8b 	bl	8000700 <lcd_send_string>
					HAL_Delay(1000);
 8000fea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fee:	f000 ff49 	bl	8001e84 <HAL_Delay>
					break;
 8000ff2:	e048      	b.n	8001086 <main+0x4ce>
			case 1:

					key = 0;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <main+0x4b4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
					press = 0;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <main+0x4b8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
					op = 0;
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <main+0x4bc>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
					num1 = 0;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <main+0x4c0>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
					num2 = 0;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <main+0x4c4>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
					num3 = 0;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <main+0x4c8>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
					add = 0;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <main+0x470>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
					break;
 800101e:	e032      	b.n	8001086 <main+0x4ce>
				  	break;
 8001020:	bf00      	nop
 8001022:	e030      	b.n	8001086 <main+0x4ce>
		  break;
 8001024:	bf00      	nop
 8001026:	e02e      	b.n	8001086 <main+0x4ce>
 8001028:	20000438 	.word	0x20000438
 800102c:	0800475c 	.word	0x0800475c
 8001030:	200005a0 	.word	0x200005a0
 8001034:	0800476c 	.word	0x0800476c
 8001038:	20000490 	.word	0x20000490
 800103c:	0800477c 	.word	0x0800477c
 8001040:	2000047c 	.word	0x2000047c
 8001044:	0800478c 	.word	0x0800478c
 8001048:	20000468 	.word	0x20000468
 800104c:	0800479c 	.word	0x0800479c
 8001050:	200005b4 	.word	0x200005b4
 8001054:	080047ac 	.word	0x080047ac
 8001058:	200004a4 	.word	0x200004a4
 800105c:	080047bc 	.word	0x080047bc
 8001060:	200004cc 	.word	0x200004cc
 8001064:	40020000 	.word	0x40020000
 8001068:	080047c4 	.word	0x080047c4
 800106c:	20000424 	.word	0x20000424
 8001070:	20000420 	.word	0x20000420
 8001074:	20000428 	.word	0x20000428
 8001078:	2000042c 	.word	0x2000042c
 800107c:	20000430 	.word	0x20000430
 8001080:	20000434 	.word	0x20000434
		  break;
 8001084:	bf00      	nop
	}




	  itoa(num1,string1,10);
 8001086:	4b5a      	ldr	r3, [pc, #360]	; (80011f0 <main+0x638>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	220a      	movs	r2, #10
 800108c:	4959      	ldr	r1, [pc, #356]	; (80011f4 <main+0x63c>)
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fac2 	bl	8004618 <itoa>
	  itoa(num3,string2,10);
 8001094:	4b58      	ldr	r3, [pc, #352]	; (80011f8 <main+0x640>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	220a      	movs	r2, #10
 800109a:	4958      	ldr	r1, [pc, #352]	; (80011fc <main+0x644>)
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fabb 	bl	8004618 <itoa>

//ESTA PARTE MUESTRA EN LA PANTALLA EL MENSAJE  INGRESE EL VALOR
	  if(op == 1 && press == 0)
 80010a2:	4b57      	ldr	r3, [pc, #348]	; (8001200 <main+0x648>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d110      	bne.n	80010cc <main+0x514>
 80010aa:	4b56      	ldr	r3, [pc, #344]	; (8001204 <main+0x64c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10c      	bne.n	80010cc <main+0x514>
	 	  {
	 			  lcd_clear();
 80010b2:	f7ff fabf 	bl	8000634 <lcd_clear>
	 			  lcd_put_cur(0, 0);
 80010b6:	2100      	movs	r1, #0
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fac5 	bl	8000648 <lcd_put_cur>
	 			  lcd_send_string("Ingrese el valor:");
 80010be:	4852      	ldr	r0, [pc, #328]	; (8001208 <main+0x650>)
 80010c0:	f7ff fb1e 	bl	8000700 <lcd_send_string>
	 			  HAL_Delay(1000);
 80010c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c8:	f000 fedc 	bl	8001e84 <HAL_Delay>
	 	  }


	  if(op == 1 && press == 1)
 80010cc:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <main+0x648>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d11e      	bne.n	8001112 <main+0x55a>
 80010d4:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <main+0x64c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d11a      	bne.n	8001112 <main+0x55a>
	 	  {
		  	  	  //ESTA PARTE PERMITE INTRODUCIR LOS NUMEROS CON EL KEYPAD
		  	  	  num1 = key;
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <main+0x654>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a43      	ldr	r2, [pc, #268]	; (80011f0 <main+0x638>)
 80010e2:	6013      	str	r3, [r2, #0]

	 			  lcd_clear();
 80010e4:	f7ff faa6 	bl	8000634 <lcd_clear>
	 			  lcd_put_cur(0, 0);
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff faac 	bl	8000648 <lcd_put_cur>
	 			  lcd_send_string("Ingrese el valor:");
 80010f0:	4845      	ldr	r0, [pc, #276]	; (8001208 <main+0x650>)
 80010f2:	f7ff fb05 	bl	8000700 <lcd_send_string>
	 			  lcd_put_cur(1, 4);
 80010f6:	2104      	movs	r1, #4
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff faa5 	bl	8000648 <lcd_put_cur>
	 			  lcd_send_string(string1);
 80010fe:	483d      	ldr	r0, [pc, #244]	; (80011f4 <main+0x63c>)
 8001100:	f7ff fafe 	bl	8000700 <lcd_send_string>
	 			  lcd_send_string(" pesos");
 8001104:	4842      	ldr	r0, [pc, #264]	; (8001210 <main+0x658>)
 8001106:	f7ff fafb 	bl	8000700 <lcd_send_string>
	 			  HAL_Delay(1000);
 800110a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110e:	f000 feb9 	bl	8001e84 <HAL_Delay>
	 	  }



	  if(op == 1 && press >=2)
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <main+0x648>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d12a      	bne.n	8001170 <main+0x5b8>
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <main+0x64c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	dd26      	ble.n	8001170 <main+0x5b8>
	 	 	  {

		  	  	  //ESTA PARTE PERMITE INTRODUCIR LOS NUMEROS CON EL KEYPAD
		  	  	  	  num2 = key;
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <main+0x654>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a3b      	ldr	r2, [pc, #236]	; (8001214 <main+0x65c>)
 8001128:	6013      	str	r3, [r2, #0]
		  			  num3 = num1 * 10 + num2 ;
 800112a:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <main+0x638>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	461a      	mov	r2, r3
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <main+0x65c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4413      	add	r3, r2
 800113e:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <main+0x640>)
 8001140:	6013      	str	r3, [r2, #0]

		  	  	  	  lcd_clear();
 8001142:	f7ff fa77 	bl	8000634 <lcd_clear>
	 	 			  lcd_put_cur(0, 0);
 8001146:	2100      	movs	r1, #0
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fa7d 	bl	8000648 <lcd_put_cur>
	 	 			  lcd_send_string("Ingrese el valor:");
 800114e:	482e      	ldr	r0, [pc, #184]	; (8001208 <main+0x650>)
 8001150:	f7ff fad6 	bl	8000700 <lcd_send_string>
	 	 			  lcd_put_cur(1, 4);
 8001154:	2104      	movs	r1, #4
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff fa76 	bl	8000648 <lcd_put_cur>
	 	 			  lcd_send_string(string2);
 800115c:	4827      	ldr	r0, [pc, #156]	; (80011fc <main+0x644>)
 800115e:	f7ff facf 	bl	8000700 <lcd_send_string>
	 	 			  lcd_send_string(" pesos");
 8001162:	482b      	ldr	r0, [pc, #172]	; (8001210 <main+0x658>)
 8001164:	f7ff facc 	bl	8000700 <lcd_send_string>
	 	 			  HAL_Delay(1000);
 8001168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116c:	f000 fe8a 	bl	8001e84 <HAL_Delay>
	    /* USER CODE END WHILE */



//ESTA PARTE PERMITE OBTENER LA SUMA TOTAL DEL DINERO
	if(num1 <= 5 && num3 == 0 && add == 1)
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <main+0x638>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b05      	cmp	r3, #5
 8001176:	dc0e      	bgt.n	8001196 <main+0x5de>
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <main+0x640>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10a      	bne.n	8001196 <main+0x5de>
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <main+0x660>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d106      	bne.n	8001196 <main+0x5de>
		{
		dinero = dinero + num1;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <main+0x664>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <main+0x638>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4413      	add	r3, r2
 8001192:	4a22      	ldr	r2, [pc, #136]	; (800121c <main+0x664>)
 8001194:	6013      	str	r3, [r2, #0]
		}

	if(num3 > 0 && add == 1)
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <main+0x640>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	dd0a      	ble.n	80011b4 <main+0x5fc>
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <main+0x660>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d106      	bne.n	80011b4 <main+0x5fc>
		{
		dinero = dinero + num3;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <main+0x664>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <main+0x640>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a1a      	ldr	r2, [pc, #104]	; (800121c <main+0x664>)
 80011b2:	6013      	str	r3, [r2, #0]
		}




	itoa(m1,string5,10);
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <main+0x668>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	220a      	movs	r2, #10
 80011ba:	491a      	ldr	r1, [pc, #104]	; (8001224 <main+0x66c>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fa2b 	bl	8004618 <itoa>
	itoa(m2,string6,10);
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <main+0x670>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	220a      	movs	r2, #10
 80011c8:	4918      	ldr	r1, [pc, #96]	; (800122c <main+0x674>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fa24 	bl	8004618 <itoa>
	itoa(m3,string7,10);
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <main+0x678>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	220a      	movs	r2, #10
 80011d6:	4917      	ldr	r1, [pc, #92]	; (8001234 <main+0x67c>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 fa1d 	bl	8004618 <itoa>
	itoa(m4,string8,10);
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <main+0x680>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	220a      	movs	r2, #10
 80011e4:	4915      	ldr	r1, [pc, #84]	; (800123c <main+0x684>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fa16 	bl	8004618 <itoa>
	  pineskey();
 80011ec:	e50e      	b.n	8000c0c <main+0x54>
 80011ee:	bf00      	nop
 80011f0:	2000042c 	.word	0x2000042c
 80011f4:	200004b8 	.word	0x200004b8
 80011f8:	20000434 	.word	0x20000434
 80011fc:	20000454 	.word	0x20000454
 8001200:	20000428 	.word	0x20000428
 8001204:	20000420 	.word	0x20000420
 8001208:	080047d8 	.word	0x080047d8
 800120c:	20000424 	.word	0x20000424
 8001210:	080047bc 	.word	0x080047bc
 8001214:	20000430 	.word	0x20000430
 8001218:	20000438 	.word	0x20000438
 800121c:	20000440 	.word	0x20000440
 8001220:	20000444 	.word	0x20000444
 8001224:	20000490 	.word	0x20000490
 8001228:	20000448 	.word	0x20000448
 800122c:	2000047c 	.word	0x2000047c
 8001230:	2000044c 	.word	0x2000044c
 8001234:	20000468 	.word	0x20000468
 8001238:	20000450 	.word	0x20000450
 800123c:	200005b4 	.word	0x200005b4

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	2234      	movs	r2, #52	; 0x34
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f9e4 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <SystemClock_Config+0xdc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a2b      	ldr	r2, [pc, #172]	; (800131c <SystemClock_Config+0xdc>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <SystemClock_Config+0xdc>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <SystemClock_Config+0xe0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a25      	ldr	r2, [pc, #148]	; (8001320 <SystemClock_Config+0xe0>)
 800128a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <SystemClock_Config+0xe0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129c:	2301      	movs	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a6:	2302      	movs	r3, #2
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012b4:	23b4      	movs	r3, #180	; 0xb4
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fc25 	bl	8002b18 <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d4:	f000 fa10 	bl	80016f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012d8:	f001 f902 	bl	80024e0 <HAL_PWREx_EnableOverDrive>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012e2:	f000 fa09 	bl	80016f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2302      	movs	r3, #2
 80012ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2105      	movs	r1, #5
 8001304:	4618      	mov	r0, r3
 8001306:	f001 f93b 	bl	8002580 <HAL_RCC_ClockConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001310:	f000 f9f2 	bl	80016f8 <Error_Handler>
  }
}
 8001314:	bf00      	nop
 8001316:	3750      	adds	r7, #80	; 0x50
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b096      	sub	sp, #88	; 0x58
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2220      	movs	r2, #32
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f003 f95d 	bl	800461c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001362:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001364:	4a3f      	ldr	r2, [pc, #252]	; (8001464 <MX_TIM1_Init+0x140>)
 8001366:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800;
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <MX_TIM1_Init+0x13c>)
 800136a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800136e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001378:	f240 32e7 	movw	r2, #999	; 0x3e7
 800137c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <MX_TIM1_Init+0x13c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001390:	4833      	ldr	r0, [pc, #204]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001392:	f001 fe5f 	bl	8003054 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800139c:	f000 f9ac 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013aa:	4619      	mov	r1, r3
 80013ac:	482c      	ldr	r0, [pc, #176]	; (8001460 <MX_TIM1_Init+0x13c>)
 80013ae:	f002 f9f5 	bl	800379c <HAL_TIM_ConfigClockSource>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013b8:	f000 f99e 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013bc:	4828      	ldr	r0, [pc, #160]	; (8001460 <MX_TIM1_Init+0x13c>)
 80013be:	f001 ff01 	bl	80031c4 <HAL_TIM_PWM_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013c8:	f000 f996 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013d8:	4619      	mov	r1, r3
 80013da:	4821      	ldr	r0, [pc, #132]	; (8001460 <MX_TIM1_Init+0x13c>)
 80013dc:	f002 fde8 	bl	8003fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80013e6:	f000 f987 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ea:	2360      	movs	r3, #96	; 0x60
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	2204      	movs	r2, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4814      	ldr	r0, [pc, #80]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001410:	f002 f902 	bl	8003618 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800141a:	f000 f96d 	bl	80016f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001442:	f002 fe31 	bl	80040a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800144c:	f000 f954 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001452:	f000 fb71 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 8001456:	bf00      	nop
 8001458:	3758      	adds	r7, #88	; 0x58
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200004cc 	.word	0x200004cc
 8001464:	40010000 	.word	0x40010000

08001468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_TIM2_Init+0x94>)
 8001486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_TIM2_Init+0x94>)
 800148e:	22b3      	movs	r2, #179	; 0xb3
 8001490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_TIM2_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_TIM2_Init+0x94>)
 800149a:	f04f 32ff 	mov.w	r2, #4294967295
 800149e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_TIM2_Init+0x94>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_TIM2_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <MX_TIM2_Init+0x94>)
 80014ae:	f001 fdd1 	bl	8003054 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014b8:	f000 f91e 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4619      	mov	r1, r3
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_TIM2_Init+0x94>)
 80014ca:	f002 f967 	bl	800379c <HAL_TIM_ConfigClockSource>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014d4:	f000 f910 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM2_Init+0x94>)
 80014e6:	f002 fd63 	bl	8003fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014f0:	f000 f902 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000514 	.word	0x20000514

08001500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <MX_USART2_UART_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001538:	f002 fe1c 	bl	8004174 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001542:	f000 f8d9 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000055c 	.word	0x2000055c
 8001550:	40004400 	.word	0x40004400

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <MX_GPIO_Init+0x194>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a5d      	ldr	r2, [pc, #372]	; (80016e8 <MX_GPIO_Init+0x194>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <MX_GPIO_Init+0x194>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b57      	ldr	r3, [pc, #348]	; (80016e8 <MX_GPIO_Init+0x194>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a56      	ldr	r2, [pc, #344]	; (80016e8 <MX_GPIO_Init+0x194>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <MX_GPIO_Init+0x194>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <MX_GPIO_Init+0x194>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a4f      	ldr	r2, [pc, #316]	; (80016e8 <MX_GPIO_Init+0x194>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <MX_GPIO_Init+0x194>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <MX_GPIO_Init+0x194>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <MX_GPIO_Init+0x194>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <MX_GPIO_Init+0x194>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80015da:	2200      	movs	r2, #0
 80015dc:	f641 71f3 	movw	r1, #8179	; 0x1ff3
 80015e0:	4842      	ldr	r0, [pc, #264]	; (80016ec <MX_GPIO_Init+0x198>)
 80015e2:	f000 ff31 	bl	8002448 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, data_Pin|cs_Pin|clock_Pin|GPIO_PIN_12
 80015e6:	2200      	movs	r2, #0
 80015e8:	f249 11c0 	movw	r1, #37312	; 0x91c0
 80015ec:	4840      	ldr	r0, [pc, #256]	; (80016f0 <MX_GPIO_Init+0x19c>)
 80015ee:	f000 ff2b 	bl	8002448 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12
 80015f2:	2200      	movs	r2, #0
 80015f4:	f24f 71f3 	movw	r1, #63475	; 0xf7f3
 80015f8:	483e      	ldr	r0, [pc, #248]	; (80016f4 <MX_GPIO_Init+0x1a0>)
 80015fa:	f000 ff25 	bl	8002448 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001604:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4835      	ldr	r0, [pc, #212]	; (80016ec <MX_GPIO_Init+0x198>)
 8001616:	f000 fd6b 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800161a:	f641 73f3 	movw	r3, #8179	; 0x1ff3
 800161e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	482e      	ldr	r0, [pc, #184]	; (80016ec <MX_GPIO_Init+0x198>)
 8001634:	f000 fd5c 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001638:	2333      	movs	r3, #51	; 0x33
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800163c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001642:	2302      	movs	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4828      	ldr	r0, [pc, #160]	; (80016f0 <MX_GPIO_Init+0x19c>)
 800164e:	f000 fd4f 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : data_Pin cs_Pin clock_Pin PA12
                           PA15 */
  GPIO_InitStruct.Pin = data_Pin|cs_Pin|clock_Pin|GPIO_PIN_12
 8001652:	f249 13c0 	movw	r3, #37312	; 0x91c0
 8001656:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4821      	ldr	r0, [pc, #132]	; (80016f0 <MX_GPIO_Init+0x19c>)
 800166c:	f000 fd40 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12
 8001670:	f24f 73f3 	movw	r3, #63475	; 0xf7f3
 8001674:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	481a      	ldr	r0, [pc, #104]	; (80016f4 <MX_GPIO_Init+0x1a0>)
 800168a:	f000 fd31 	bl	80020f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2006      	movs	r0, #6
 8001694:	f000 fcf5 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001698:	2006      	movs	r0, #6
 800169a:	f000 fd0e 	bl	80020ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2007      	movs	r0, #7
 80016a4:	f000 fced 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016a8:	2007      	movs	r0, #7
 80016aa:	f000 fd06 	bl	80020ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200a      	movs	r0, #10
 80016b4:	f000 fce5 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016b8:	200a      	movs	r0, #10
 80016ba:	f000 fcfe 	bl	80020ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2017      	movs	r0, #23
 80016c4:	f000 fcdd 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016c8:	2017      	movs	r0, #23
 80016ca:	f000 fcf6 	bl	80020ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2028      	movs	r0, #40	; 0x28
 80016d4:	f000 fcd5 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d8:	2028      	movs	r0, #40	; 0x28
 80016da:	f000 fcee 	bl	80020ba <HAL_NVIC_EnableIRQ>

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	e01a      	b.n	800174a <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171a:	4810      	ldr	r0, [pc, #64]	; (800175c <write_byte+0x58>)
 800171c:	f000 fe94 	bl	8002448 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	2140      	movs	r1, #64	; 0x40
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <write_byte+0x58>)
 800172e:	f000 fe8b 	bl	8002448 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <write_byte+0x58>)
 8001740:	f000 fe82 	bl	8002448 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3301      	adds	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b07      	cmp	r3, #7
 800174e:	dde1      	ble.n	8001714 <write_byte+0x10>
	}
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40020000 	.word	0x40020000

08001760 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	460a      	mov	r2, r1
 800176a:	71fb      	strb	r3, [r7, #7]
 800176c:	4613      	mov	r3, r2
 800176e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	4810      	ldr	r0, [pc, #64]	; (80017b8 <write_max_cmd+0x58>)
 8001776:	f000 fe67 	bl	8002448 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e00a      	b.n	8001796 <write_max_cmd+0x36>
	{
		write_byte (address);
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ffbe 	bl	8001704 <write_byte>
		write_byte (cmd); 
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ffba 	bl	8001704 <write_byte>
	for (int i=0;i<num; i++)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	ddf1      	ble.n	8001780 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 800179c:	2200      	movs	r2, #0
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <write_max_cmd+0x58>)
 80017a2:	f000 fe51 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80017a6:	2201      	movs	r2, #1
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <write_max_cmd+0x58>)
 80017ac:	f000 fe4c 	bl	8002448 <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40020000 	.word	0x40020000

080017bc <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	460b      	mov	r3, r1
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	4613      	mov	r3, r2
 80017cc:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 80017ce:	797b      	ldrb	r3, [r7, #5]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <setled+0x34>
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	4a2c      	ldr	r2, [pc, #176]	; (8001888 <setled+0xcc>)
 80017d8:	5cd1      	ldrb	r1, [r2, r3]
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2201      	movs	r2, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	b2d1      	uxtb	r1, r2
 80017ea:	4a27      	ldr	r2, [pc, #156]	; (8001888 <setled+0xcc>)
 80017ec:	54d1      	strb	r1, [r2, r3]
 80017ee:	e00e      	b.n	800180e <setled+0x52>
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	4a25      	ldr	r2, [pc, #148]	; (8001888 <setled+0xcc>)
 80017f4:	5cd1      	ldrb	r1, [r2, r3]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2201      	movs	r2, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	400a      	ands	r2, r1
 8001808:	b2d1      	uxtb	r1, r2
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <setled+0xcc>)
 800180c:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 800180e:	79bb      	ldrb	r3, [r7, #6]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 800181e:	2200      	movs	r2, #0
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	481a      	ldr	r0, [pc, #104]	; (800188c <setled+0xd0>)
 8001824:	f000 fe10 	bl	8002448 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e01b      	b.n	8001866 <setled+0xaa>
	{
		if (i == (num-(n+1)))
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	425b      	negs	r3, r3
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	429a      	cmp	r2, r3
 8001836:	d10d      	bne.n	8001854 <setled+0x98>
		{
			write_byte (((c+1)));
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	3301      	adds	r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5f 	bl	8001704 <write_byte>
			write_byte (buffer[col]);
 8001846:	79bb      	ldrb	r3, [r7, #6]
 8001848:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <setled+0xcc>)
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff59 	bl	8001704 <write_byte>
 8001852:	e005      	b.n	8001860 <setled+0xa4>
		}
		else
		{
			write_byte (0);
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ff55 	bl	8001704 <write_byte>
			write_byte (0);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff ff52 	bl	8001704 <write_byte>
	for (int i=0; i<num; i++) 
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dde0      	ble.n	800182e <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 800186c:	2200      	movs	r2, #0
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	4806      	ldr	r0, [pc, #24]	; (800188c <setled+0xd0>)
 8001872:	f000 fde9 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8001876:	2201      	movs	r2, #1
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	4804      	ldr	r0, [pc, #16]	; (800188c <setled+0xd0>)
 800187c:	f000 fde4 	bl	8002448 <HAL_GPIO_WritePin>
}
 8001880:	bf00      	nop
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000618 	.word	0x20000618
 800188c:	40020000 	.word	0x40020000

08001890 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	e02d      	b.n	8001916 <setrow+0x86>
	{
		if (i == ((n)))
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d120      	bne.n	8001904 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	3307      	adds	r3, #7
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	e015      	b.n	80018f8 <setrow+0x68>
			{
				bool b = value&0x80;
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	b2d1      	uxtb	r1, r2
 80018e4:	7bba      	ldrb	r2, [r7, #14]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff68 	bl	80017bc <setled>
				value<<=1;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	429a      	cmp	r2, r3
 8001900:	dae4      	bge.n	80018cc <setrow+0x3c>
 8001902:	e005      	b.n	8001910 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff fefd 	bl	8001704 <write_byte>
			write_byte (0);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fefa 	bl	8001704 <write_byte>
	for (int i=0; i<num; i++) 
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	3301      	adds	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	2b00      	cmp	r3, #0
 800191a:	ddce      	ble.n	80018ba <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4903      	ldr	r1, [pc, #12]	; (800192c <setrow+0x9c>)
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	54ca      	strb	r2, [r1, r3]
}
 8001924:	bf00      	nop
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200005c8 	.word	0x200005c8

08001930 <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <write_char+0x70>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
	int row =6;
 8001952:	2306      	movs	r3, #6
 8001954:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	e016      	b.n	800198a <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	3b01      	subs	r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	b2da      	uxtb	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4413      	add	r3, r2
 800196c:	b2da      	uxtb	r2, r3
 800196e:	490c      	ldr	r1, [pc, #48]	; (80019a0 <write_char+0x70>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	440b      	add	r3, r1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	4610      	mov	r0, r2
 800197a:	f7ff ff89 	bl	8001890 <setrow>
		row--;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3b01      	subs	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	3301      	adds	r3, #1
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbe2      	blt.n	800195c <write_char+0x2c>
	}
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000

080019a4 <max_clear>:
}



void max_clear(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e008      	b.n	80019c2 <max_clear+0x1e>
		setrow(i,0);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff6a 	bl	8001890 <setrow>
	for (int i=0; i<num*8; i++) 
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	ddf3      	ble.n	80019b0 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	e00c      	b.n	80019e8 <max_clear+0x44>
	{
		buffer[i] = 0;
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <max_clear+0x54>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 80019d8:	4a08      	ldr	r2, [pc, #32]	; (80019fc <max_clear+0x58>)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b4f      	cmp	r3, #79	; 0x4f
 80019ec:	ddef      	ble.n	80019ce <max_clear+0x2a>
	}
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000618 	.word	0x20000618
 80019fc:	200005c8 	.word	0x200005c8

08001a00 <max_init>:
}



void max_init (uint8_t brightness)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2009      	movs	r0, #9
 8001a0e:	f7ff fea7 	bl	8001760 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8001a12:	2107      	movs	r1, #7
 8001a14:	200b      	movs	r0, #11
 8001a16:	f7ff fea3 	bl	8001760 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	200c      	movs	r0, #12
 8001a1e:	f7ff fe9f 	bl	8001760 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8001a22:	2100      	movs	r1, #0
 8001a24:	200f      	movs	r0, #15
 8001a26:	f7ff fe9b 	bl	8001760 <write_max_cmd>
	
	max_clear ();
 8001a2a:	f7ff ffbb 	bl	80019a4 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4619      	mov	r1, r3
 8001a32:	200a      	movs	r0, #10
 8001a34:	f7ff fe94 	bl	8001760 <write_max_cmd>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a7e:	2007      	movs	r0, #7
 8001a80:	f000 faf4 	bl	800206c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <HAL_TIM_Base_MspInit+0xa0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12e      	bne.n	8001b00 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_TIM_Base_MspInit+0xa4>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <HAL_TIM_Base_MspInit+0xa4>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_TIM_Base_MspInit+0xa4>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2018      	movs	r0, #24
 8001ac4:	f000 fadd 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ac8:	2018      	movs	r0, #24
 8001aca:	f000 faf6 	bl	80020ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2019      	movs	r0, #25
 8001ad4:	f000 fad5 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ad8:	2019      	movs	r0, #25
 8001ada:	f000 faee 	bl	80020ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	201a      	movs	r0, #26
 8001ae4:	f000 facd 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ae8:	201a      	movs	r0, #26
 8001aea:	f000 fae6 	bl	80020ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	201b      	movs	r0, #27
 8001af4:	f000 fac5 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001af8:	201b      	movs	r0, #27
 8001afa:	f000 fade 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001afe:	e012      	b.n	8001b26 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b08:	d10d      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_TIM_Base_MspInit+0xa4>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_TIM_Base_MspInit+0xa4>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_TIM_Base_MspInit+0xa4>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_TIM_MspPostInit+0x68>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11e      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4619      	mov	r1, r3
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_TIM_MspPostInit+0x70>)
 8001b94:	f000 faac 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020000 	.word	0x40020000

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0x84>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12b      	bne.n	8001c26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c06:	230c      	movs	r3, #12
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c16:	2307      	movs	r3, #7
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_UART_MspInit+0x8c>)
 8001c22:	f000 fa65 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40004400 	.word	0x40004400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c88:	f000 f8dc 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 fc0b 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f000 fc04 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001cb0:	2010      	movs	r0, #16
 8001cb2:	f000 fbfd 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001cbe:	2020      	movs	r0, #32
 8001cc0:	f000 fbf6 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001cce:	f001 fb9b 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200004cc 	.word	0x200004cc

08001cdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ce2:	f001 fb91 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200004cc 	.word	0x200004cc

08001cf0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cf6:	f001 fb87 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200004cc 	.word	0x200004cc

08001d04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <TIM1_CC_IRQHandler+0x10>)
 8001d0a:	f001 fb7d 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200004cc 	.word	0x200004cc

08001d18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d20:	f000 fbc6 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d52:	490e      	ldr	r1, [pc, #56]	; (8001d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d68:	4c0b      	ldr	r4, [pc, #44]	; (8001d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d76:	f7ff ffd7 	bl	8001d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f002 fc11 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7e:	f7fe ff1b 	bl	8000bb8 <main>
  bx  lr    
 8001d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 8001d90:	0800483c 	.word	0x0800483c
  ldr r2, =_sbss
 8001d94:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8001d98:	2000066c 	.word	0x2000066c

08001d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_Init+0x40>)
 8001daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_Init+0x40>)
 8001db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_Init+0x40>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 f94f 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 f808 	bl	8001de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd4:	f7ff fe34 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023c00 	.word	0x40023c00

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x54>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f967 	bl	80020d6 <HAL_SYSTICK_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00e      	b.n	8001e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d80a      	bhi.n	8001e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f000 f92f 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_InitTick+0x5c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200003f8 	.word	0x200003f8
 8001e3c:	20000400 	.word	0x20000400
 8001e40:	200003fc 	.word	0x200003fc

08001e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x20>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x24>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_IncTick+0x24>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000400 	.word	0x20000400
 8001e68:	20000668 	.word	0x20000668

08001e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_GetTick+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000668 	.word	0x20000668

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff ffee 	bl	8001e6c <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d005      	beq.n	8001eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_Delay+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eaa:	bf00      	nop
 8001eac:	f7ff ffde 	bl	8001e6c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d8f7      	bhi.n	8001eac <HAL_Delay+0x28>
  {
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000400 	.word	0x20000400

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff29 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff3e 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff8e 	bl	8001fc0 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff31 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffa2 	bl	8002028 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e165      	b.n	80023d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8154 	bne.w	80023d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d005      	beq.n	8002142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	2b02      	cmp	r3, #2
 8002140:	d130      	bne.n	80021a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80ae 	beq.w	80023d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_GPIO_Init+0x300>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a5c      	ldr	r2, [pc, #368]	; (80023f0 <HAL_GPIO_Init+0x300>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <HAL_GPIO_Init+0x300>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_GPIO_Init+0x304>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4f      	ldr	r2, [pc, #316]	; (80023f8 <HAL_GPIO_Init+0x308>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d025      	beq.n	800230a <HAL_GPIO_Init+0x21a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4e      	ldr	r2, [pc, #312]	; (80023fc <HAL_GPIO_Init+0x30c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <HAL_GPIO_Init+0x216>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4d      	ldr	r2, [pc, #308]	; (8002400 <HAL_GPIO_Init+0x310>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x212>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4c      	ldr	r2, [pc, #304]	; (8002404 <HAL_GPIO_Init+0x314>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x20e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4b      	ldr	r2, [pc, #300]	; (8002408 <HAL_GPIO_Init+0x318>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x20a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4a      	ldr	r2, [pc, #296]	; (800240c <HAL_GPIO_Init+0x31c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x206>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a49      	ldr	r2, [pc, #292]	; (8002410 <HAL_GPIO_Init+0x320>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x202>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00c      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e00a      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e008      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022fe:	2303      	movs	r3, #3
 8002300:	e004      	b.n	800230c <HAL_GPIO_Init+0x21c>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_Init+0x21c>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x21c>
 800230a:	2300      	movs	r3, #0
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4093      	lsls	r3, r2
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231c:	4935      	ldr	r1, [pc, #212]	; (80023f4 <HAL_GPIO_Init+0x304>)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800232a:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_GPIO_Init+0x324>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234e:	4a31      	ldr	r2, [pc, #196]	; (8002414 <HAL_GPIO_Init+0x324>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_GPIO_Init+0x324>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002378:	4a26      	ldr	r2, [pc, #152]	; (8002414 <HAL_GPIO_Init+0x324>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_GPIO_Init+0x324>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <HAL_GPIO_Init+0x324>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_GPIO_Init+0x324>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023cc:	4a11      	ldr	r2, [pc, #68]	; (8002414 <HAL_GPIO_Init+0x324>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	f67f ae96 	bls.w	800210c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40013800 	.word	0x40013800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40020400 	.word	0x40020400
 8002400:	40020800 	.word	0x40020800
 8002404:	40020c00 	.word	0x40020c00
 8002408:	40021000 	.word	0x40021000
 800240c:	40021400 	.word	0x40021400
 8002410:	40021800 	.word	0x40021800
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800248c:	887a      	ldrh	r2, [r7, #2]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	041a      	lsls	r2, r3, #16
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43d9      	mvns	r1, r3
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	400b      	ands	r3, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	619a      	str	r2, [r3, #24]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fa4a 	bl	8000968 <HAL_GPIO_EXTI_Callback>
  }
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40013c00 	.word	0x40013c00

080024e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_PWREx_EnableOverDrive+0x90>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_PWREx_EnableOverDrive+0x90>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_PWREx_EnableOverDrive+0x90>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_PWREx_EnableOverDrive+0x94>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800250c:	f7ff fcae 	bl	8001e6c <HAL_GetTick>
 8002510:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002512:	e009      	b.n	8002528 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002514:	f7ff fcaa 	bl	8001e6c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002522:	d901      	bls.n	8002528 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e01f      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_PWREx_EnableOverDrive+0x98>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d1ee      	bne.n	8002514 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800253c:	f7ff fc96 	bl	8001e6c <HAL_GetTick>
 8002540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002542:	e009      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002544:	f7ff fc92 	bl	8001e6c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002552:	d901      	bls.n	8002558 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e007      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_PWREx_EnableOverDrive+0x98>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002564:	d1ee      	bne.n	8002544 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	420e0040 	.word	0x420e0040
 8002578:	40007000 	.word	0x40007000
 800257c:	420e0044 	.word	0x420e0044

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0cc      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b68      	ldr	r3, [pc, #416]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d90c      	bls.n	80025bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0b8      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a52      	ldr	r2, [pc, #328]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	494d      	ldr	r1, [pc, #308]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d044      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d119      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e07f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	2b03      	cmp	r3, #3
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e067      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4934      	ldr	r1, [pc, #208]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7ff fbfc 	bl	8001e6c <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7ff fbf8 	bl	8001e6c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e04f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d20c      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e032      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4916      	ldr	r1, [pc, #88]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002706:	f000 f855 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	490a      	ldr	r1, [pc, #40]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fb5c 	bl	8001de4 <HAL_InitTick>

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00
 800273c:	40023800 	.word	0x40023800
 8002740:	080047ec 	.word	0x080047ec
 8002744:	200003f8 	.word	0x200003f8
 8002748:	200003fc 	.word	0x200003fc

0800274c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_RCC_GetHCLKFreq+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	200003f8 	.word	0x200003f8

08002764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002768:	f7ff fff0 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0a9b      	lsrs	r3, r3, #10
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	080047fc 	.word	0x080047fc

0800278c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002790:	f7ff ffdc 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0b5b      	lsrs	r3, r3, #13
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	080047fc 	.word	0x080047fc

080027b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b8:	b088      	sub	sp, #32
 80027ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d0:	4bce      	ldr	r3, [pc, #824]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	f200 818d 	bhi.w	8002af8 <HAL_RCC_GetSysClockFreq+0x344>
 80027de:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	08002819 	.word	0x08002819
 80027e8:	08002af9 	.word	0x08002af9
 80027ec:	08002af9 	.word	0x08002af9
 80027f0:	08002af9 	.word	0x08002af9
 80027f4:	0800281f 	.word	0x0800281f
 80027f8:	08002af9 	.word	0x08002af9
 80027fc:	08002af9 	.word	0x08002af9
 8002800:	08002af9 	.word	0x08002af9
 8002804:	08002825 	.word	0x08002825
 8002808:	08002af9 	.word	0x08002af9
 800280c:	08002af9 	.word	0x08002af9
 8002810:	08002af9 	.word	0x08002af9
 8002814:	08002999 	.word	0x08002999
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4bbd      	ldr	r3, [pc, #756]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x35c>)
 800281a:	61bb      	str	r3, [r7, #24]
       break;
 800281c:	e16f      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281e:	4bbd      	ldr	r3, [pc, #756]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x360>)
 8002820:	61bb      	str	r3, [r7, #24]
      break;
 8002822:	e16c      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002824:	4bb9      	ldr	r3, [pc, #740]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800282c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282e:	4bb7      	ldr	r3, [pc, #732]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d053      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	4bb4      	ldr	r3, [pc, #720]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	461a      	mov	r2, r3
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	ea02 0400 	and.w	r4, r2, r0
 8002852:	603c      	str	r4, [r7, #0]
 8002854:	400b      	ands	r3, r1
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	e9d7 4500 	ldrd	r4, r5, [r7]
 800285c:	4620      	mov	r0, r4
 800285e:	4629      	mov	r1, r5
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	014b      	lsls	r3, r1, #5
 800286a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800286e:	0142      	lsls	r2, r0, #5
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	4623      	mov	r3, r4
 8002876:	1ac0      	subs	r0, r0, r3
 8002878:	462b      	mov	r3, r5
 800287a:	eb61 0103 	sbc.w	r1, r1, r3
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	018b      	lsls	r3, r1, #6
 8002888:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800288c:	0182      	lsls	r2, r0, #6
 800288e:	1a12      	subs	r2, r2, r0
 8002890:	eb63 0301 	sbc.w	r3, r3, r1
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	00d9      	lsls	r1, r3, #3
 800289e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028a2:	00d0      	lsls	r0, r2, #3
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4621      	mov	r1, r4
 80028aa:	1852      	adds	r2, r2, r1
 80028ac:	4629      	mov	r1, r5
 80028ae:	eb43 0101 	adc.w	r1, r3, r1
 80028b2:	460b      	mov	r3, r1
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	0259      	lsls	r1, r3, #9
 80028be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028c2:	0250      	lsls	r0, r2, #9
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	f7fd fc96 	bl	8000204 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	e04c      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b8a      	ldr	r3, [pc, #552]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	461a      	mov	r2, r3
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	ea02 0a00 	and.w	sl, r2, r0
 80028fa:	ea03 0b01 	and.w	fp, r3, r1
 80028fe:	4650      	mov	r0, sl
 8002900:	4659      	mov	r1, fp
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	014b      	lsls	r3, r1, #5
 800290c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002910:	0142      	lsls	r2, r0, #5
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	ebb0 000a 	subs.w	r0, r0, sl
 800291a:	eb61 010b 	sbc.w	r1, r1, fp
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	018b      	lsls	r3, r1, #6
 8002928:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800292c:	0182      	lsls	r2, r0, #6
 800292e:	1a12      	subs	r2, r2, r0
 8002930:	eb63 0301 	sbc.w	r3, r3, r1
 8002934:	f04f 0000 	mov.w	r0, #0
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	00d9      	lsls	r1, r3, #3
 800293e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002942:	00d0      	lsls	r0, r2, #3
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	eb12 020a 	adds.w	r2, r2, sl
 800294c:	eb43 030b 	adc.w	r3, r3, fp
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	0299      	lsls	r1, r3, #10
 800295a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800295e:	0290      	lsls	r0, r2, #10
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	461a      	mov	r2, r3
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	f7fd fc48 	bl	8000204 <__aeabi_uldivmod>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4613      	mov	r3, r2
 800297a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800297c:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	3301      	adds	r3, #1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	61bb      	str	r3, [r7, #24]
      break;
 8002996:	e0b2      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002998:	4b5c      	ldr	r3, [pc, #368]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a2:	4b5a      	ldr	r3, [pc, #360]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d04d      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ae:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	461a      	mov	r2, r3
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	ea02 0800 	and.w	r8, r2, r0
 80029c6:	ea03 0901 	and.w	r9, r3, r1
 80029ca:	4640      	mov	r0, r8
 80029cc:	4649      	mov	r1, r9
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	014b      	lsls	r3, r1, #5
 80029d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029dc:	0142      	lsls	r2, r0, #5
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	ebb0 0008 	subs.w	r0, r0, r8
 80029e6:	eb61 0109 	sbc.w	r1, r1, r9
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	018b      	lsls	r3, r1, #6
 80029f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029f8:	0182      	lsls	r2, r0, #6
 80029fa:	1a12      	subs	r2, r2, r0
 80029fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002a00:	f04f 0000 	mov.w	r0, #0
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	00d9      	lsls	r1, r3, #3
 8002a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a0e:	00d0      	lsls	r0, r2, #3
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	eb12 0208 	adds.w	r2, r2, r8
 8002a18:	eb43 0309 	adc.w	r3, r3, r9
 8002a1c:	f04f 0000 	mov.w	r0, #0
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	0259      	lsls	r1, r3, #9
 8002a26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a2a:	0250      	lsls	r0, r2, #9
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	f7fd fbe2 	bl	8000204 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	e04a      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	461a      	mov	r2, r3
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	ea02 0400 	and.w	r4, r2, r0
 8002a62:	ea03 0501 	and.w	r5, r3, r1
 8002a66:	4620      	mov	r0, r4
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	014b      	lsls	r3, r1, #5
 8002a74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a78:	0142      	lsls	r2, r0, #5
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	1b00      	subs	r0, r0, r4
 8002a80:	eb61 0105 	sbc.w	r1, r1, r5
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	018b      	lsls	r3, r1, #6
 8002a8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a92:	0182      	lsls	r2, r0, #6
 8002a94:	1a12      	subs	r2, r2, r0
 8002a96:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	00d9      	lsls	r1, r3, #3
 8002aa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aa8:	00d0      	lsls	r0, r2, #3
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	1912      	adds	r2, r2, r4
 8002ab0:	eb45 0303 	adc.w	r3, r5, r3
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	0299      	lsls	r1, r3, #10
 8002abe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ac2:	0290      	lsls	r0, r2, #10
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	f7fd fb96 	bl	8000204 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0f1b      	lsrs	r3, r3, #28
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	61bb      	str	r3, [r7, #24]
      break;
 8002af6:	e002      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002afa:	61bb      	str	r3, [r7, #24]
      break;
 8002afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afe:	69bb      	ldr	r3, [r7, #24]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	00f42400 	.word	0x00f42400
 8002b14:	007a1200 	.word	0x007a1200

08002b18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e28d      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8083 	beq.w	8002c3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b38:	4b94      	ldr	r3, [pc, #592]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d019      	beq.n	8002b78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b44:	4b91      	ldr	r3, [pc, #580]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b50:	4b8e      	ldr	r3, [pc, #568]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b5c:	d00c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d112      	bne.n	8002b90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	4b84      	ldr	r3, [pc, #528]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05b      	beq.n	8002c3c <HAL_RCC_OscConfig+0x124>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d157      	bne.n	8002c3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e25a      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x90>
 8002b9a:	4b7c      	ldr	r3, [pc, #496]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7b      	ldr	r2, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e01d      	b.n	8002be4 <HAL_RCC_OscConfig+0xcc>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0xb4>
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a75      	ldr	r2, [pc, #468]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a72      	ldr	r2, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0xcc>
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a6e      	ldr	r2, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b6c      	ldr	r3, [pc, #432]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6b      	ldr	r2, [pc, #428]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7ff f93e 	bl	8001e6c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7ff f93a 	bl	8001e6c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e21f      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xdc>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7ff f92a 	bl	8001e6c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff f926 	bl	8001e6c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e20b      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x104>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d06f      	beq.n	8002d2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c4a:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c56:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d105      	bne.n	8002c6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c62:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d11c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7a:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d116      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_RCC_OscConfig+0x186>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1d3      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4937      	ldr	r1, [pc, #220]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	e03a      	b.n	8002d2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cbc:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <HAL_RCC_OscConfig+0x278>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7ff f8d3 	bl	8001e6c <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cca:	f7ff f8cf 	bl	8001e6c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1b4      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4925      	ldr	r1, [pc, #148]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]
 8002cfc:	e015      	b.n	8002d2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_RCC_OscConfig+0x278>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7ff f8b2 	bl	8001e6c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7ff f8ae 	bl	8001e6c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e193      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d036      	beq.n	8002da4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7ff f892 	bl	8001e6c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7ff f88e 	bl	8001e6c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e173      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x234>
 8002d6a:	e01b      	b.n	8002da4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7ff f87b 	bl	8001e6c <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	e00e      	b.n	8002d98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7ff f877 	bl	8001e6c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d907      	bls.n	8002d98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e15c      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	42470000 	.word	0x42470000
 8002d94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b8a      	ldr	r3, [pc, #552]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ea      	bne.n	8002d7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8097 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db6:	4b83      	ldr	r3, [pc, #524]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	4b7f      	ldr	r3, [pc, #508]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a7e      	ldr	r2, [pc, #504]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b7c      	ldr	r3, [pc, #496]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <HAL_RCC_OscConfig+0x4b0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d118      	bne.n	8002e20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dee:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_RCC_OscConfig+0x4b0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a75      	ldr	r2, [pc, #468]	; (8002fc8 <HAL_RCC_OscConfig+0x4b0>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfa:	f7ff f837 	bl	8001e6c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e02:	f7ff f833 	bl	8001e6c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e118      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x4b0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x31e>
 8002e28:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a65      	ldr	r2, [pc, #404]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	e01c      	b.n	8002e70 <HAL_RCC_OscConfig+0x358>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x340>
 8002e3e:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a60      	ldr	r2, [pc, #384]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0x358>
 8002e58:	4b5a      	ldr	r3, [pc, #360]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a59      	ldr	r2, [pc, #356]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a56      	ldr	r2, [pc, #344]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e6a:	f023 0304 	bic.w	r3, r3, #4
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d015      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe fff8 	bl	8001e6c <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7fe fff4 	bl	8001e6c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0d7      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0ee      	beq.n	8002e80 <HAL_RCC_OscConfig+0x368>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe ffe2 	bl	8001e6c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f7fe ffde 	bl	8001e6c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e0c1      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1ee      	bne.n	8002eac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	4a3a      	ldr	r2, [pc, #232]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80ad 	beq.w	8003044 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d060      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d145      	bne.n	8002f8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <HAL_RCC_OscConfig+0x4b4>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe ffb2 	bl	8001e6c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe ffae 	bl	8001e6c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e093      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	3b01      	subs	r3, #1
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	491b      	ldr	r1, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x4b4>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe ff83 	bl	8001e6c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fe ff7f 	bl	8001e6c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e064      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x452>
 8002f88:	e05c      	b.n	8003044 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCC_OscConfig+0x4b4>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe ff6c 	bl	8001e6c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe ff68 	bl	8001e6c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e04d      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x480>
 8002fb6:	e045      	b.n	8003044 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e040      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <HAL_RCC_OscConfig+0x538>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d030      	beq.n	8003040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d129      	bne.n	8003040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d122      	bne.n	8003040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003008:	4293      	cmp	r3, r2
 800300a:	d119      	bne.n	8003040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	3b01      	subs	r3, #1
 800301a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d10f      	bne.n	8003040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e041      	b.n	80030ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fd08 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 fc7c 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d001      	beq.n	800310c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e046      	b.n	800319a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <HAL_TIM_Base_Start+0xb4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_TIM_Base_Start+0x70>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003126:	d01d      	beq.n	8003164 <HAL_TIM_Base_Start+0x70>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <HAL_TIM_Base_Start+0xb8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_TIM_Base_Start+0x70>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_TIM_Base_Start+0xbc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_TIM_Base_Start+0x70>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <HAL_TIM_Base_Start+0xc0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_TIM_Base_Start+0x70>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_TIM_Base_Start+0xc4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_TIM_Base_Start+0x70>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a19      	ldr	r2, [pc, #100]	; (80031bc <HAL_TIM_Base_Start+0xc8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_Base_Start+0x70>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <HAL_TIM_Base_Start+0xcc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d111      	bne.n	8003188 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d010      	beq.n	8003198 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	e007      	b.n	8003198 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40001800 	.word	0x40001800

080031c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e041      	b.n	800325a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f839 	bl	8003262 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f000 fbc4 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_TIM_PWM_Start+0x24>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e022      	b.n	80032e2 <HAL_TIM_PWM_Start+0x6a>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d109      	bne.n	80032b6 <HAL_TIM_PWM_Start+0x3e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	e015      	b.n	80032e2 <HAL_TIM_PWM_Start+0x6a>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d109      	bne.n	80032d0 <HAL_TIM_PWM_Start+0x58>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e008      	b.n	80032e2 <HAL_TIM_PWM_Start+0x6a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e07c      	b.n	80033e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_PWM_Start+0x82>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f8:	e013      	b.n	8003322 <HAL_TIM_PWM_Start+0xaa>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d104      	bne.n	800330a <HAL_TIM_PWM_Start+0x92>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003308:	e00b      	b.n	8003322 <HAL_TIM_PWM_Start+0xaa>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d104      	bne.n	800331a <HAL_TIM_PWM_Start+0xa2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003318:	e003      	b.n	8003322 <HAL_TIM_PWM_Start+0xaa>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fe1a 	bl	8003f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <HAL_TIM_PWM_Start+0x174>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d004      	beq.n	8003344 <HAL_TIM_PWM_Start+0xcc>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <HAL_TIM_PWM_Start+0x178>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_TIM_PWM_Start+0xd0>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_TIM_PWM_Start+0xd2>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <HAL_TIM_PWM_Start+0x174>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_TIM_PWM_Start+0x136>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d01d      	beq.n	80033ae <HAL_TIM_PWM_Start+0x136>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <HAL_TIM_PWM_Start+0x17c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_TIM_PWM_Start+0x136>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <HAL_TIM_PWM_Start+0x180>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_TIM_PWM_Start+0x136>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <HAL_TIM_PWM_Start+0x184>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_TIM_PWM_Start+0x136>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_TIM_PWM_Start+0x178>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_TIM_PWM_Start+0x136>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_TIM_PWM_Start+0x188>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_TIM_PWM_Start+0x136>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a16      	ldr	r2, [pc, #88]	; (8003404 <HAL_TIM_PWM_Start+0x18c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d111      	bne.n	80033d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d010      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d0:	e007      	b.n	80033e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40010400 	.word	0x40010400
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40000c00 	.word	0x40000c00
 8003400:	40014000 	.word	0x40014000
 8003404:	40001800 	.word	0x40001800

08003408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0202 	mvn.w	r2, #2
 8003434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa81 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa73 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa84 	bl	8003966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0204 	mvn.w	r2, #4
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa57 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa49 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fa5a 	bl	8003966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d122      	bne.n	800350c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d11b      	bne.n	800350c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0208 	mvn.w	r2, #8
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa2d 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa1f 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa30 	bl	8003966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b10      	cmp	r3, #16
 8003518:	d122      	bne.n	8003560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b10      	cmp	r3, #16
 8003526:	d11b      	bne.n	8003560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0210 	mvn.w	r2, #16
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2208      	movs	r2, #8
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa03 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9f5 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fa06 	bl	8003966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0201 	mvn.w	r2, #1
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f9cf 	bl	800392a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d107      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fdd4 	bl	8004160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9cb 	bl	800397a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0220 	mvn.w	r2, #32
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fd9e 	bl	800414c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003632:	2302      	movs	r3, #2
 8003634:	e0ae      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	f200 809f 	bhi.w	8003784 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	08003681 	.word	0x08003681
 8003650:	08003785 	.word	0x08003785
 8003654:	08003785 	.word	0x08003785
 8003658:	08003785 	.word	0x08003785
 800365c:	080036c1 	.word	0x080036c1
 8003660:	08003785 	.word	0x08003785
 8003664:	08003785 	.word	0x08003785
 8003668:	08003785 	.word	0x08003785
 800366c:	08003703 	.word	0x08003703
 8003670:	08003785 	.word	0x08003785
 8003674:	08003785 	.word	0x08003785
 8003678:	08003785 	.word	0x08003785
 800367c:	08003743 	.word	0x08003743
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fa22 	bl	8003ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0204 	bic.w	r2, r2, #4
 80036aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6999      	ldr	r1, [r3, #24]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	619a      	str	r2, [r3, #24]
      break;
 80036be:	e064      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa72 	bl	8003bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
      break;
 8003700:	e043      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fac7 	bl	8003c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0208 	orr.w	r2, r2, #8
 800371c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0204 	bic.w	r2, r2, #4
 800372c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
      break;
 8003740:	e023      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fb1b 	bl	8003d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	021a      	lsls	r2, r3, #8
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	61da      	str	r2, [r3, #28]
      break;
 8003782:	e002      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
      break;
 8003788:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIM_ConfigClockSource+0x1c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e0b4      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x186>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f0:	d03e      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xd4>
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f6:	f200 8087 	bhi.w	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	f000 8086 	beq.w	800390e <HAL_TIM_ConfigClockSource+0x172>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	d87f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003808:	2b70      	cmp	r3, #112	; 0x70
 800380a:	d01a      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xa6>
 800380c:	2b70      	cmp	r3, #112	; 0x70
 800380e:	d87b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b60      	cmp	r3, #96	; 0x60
 8003812:	d050      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003814:	2b60      	cmp	r3, #96	; 0x60
 8003816:	d877      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b50      	cmp	r3, #80	; 0x50
 800381a:	d03c      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xfa>
 800381c:	2b50      	cmp	r3, #80	; 0x50
 800381e:	d873      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d058      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d86f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b30      	cmp	r3, #48	; 0x30
 800382a:	d064      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	2b30      	cmp	r3, #48	; 0x30
 800382e:	d86b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b20      	cmp	r3, #32
 8003832:	d060      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	2b20      	cmp	r3, #32
 8003836:	d867      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b10      	cmp	r3, #16
 800383e:	d05a      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003840:	e062      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f000 fb67 	bl	8003f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
      break;
 800386e:	e04f      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f000 fb50 	bl	8003f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e03c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f000 fac4 	bl	8003e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2150      	movs	r1, #80	; 0x50
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fb1d 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 80038b4:	e02c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 fae3 	bl	8003e8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2160      	movs	r1, #96	; 0x60
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fb0d 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 80038d4:	e01c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 faa4 	bl	8003e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fafd 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 80038f4:	e00c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f000 faf4 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003906:	e003      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	e000      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800390e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ae:	d00f      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <TIM_Base_SetConfig+0x118>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <TIM_Base_SetConfig+0x11c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3b      	ldr	r2, [pc, #236]	; (8003ab0 <TIM_Base_SetConfig+0x120>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02b      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d027      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <TIM_Base_SetConfig+0x118>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d023      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <TIM_Base_SetConfig+0x11c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01f      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <TIM_Base_SetConfig+0x120>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01b      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d017      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <TIM_Base_SetConfig+0x128>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a27      	ldr	r2, [pc, #156]	; (8003abc <TIM_Base_SetConfig+0x12c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00f      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <TIM_Base_SetConfig+0x130>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00b      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <TIM_Base_SetConfig+0x134>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <TIM_Base_SetConfig+0x138>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a23      	ldr	r2, [pc, #140]	; (8003acc <TIM_Base_SetConfig+0x13c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d108      	bne.n	8003a54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0xf8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d103      	bne.n	8003a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	615a      	str	r2, [r3, #20]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	40000c00 	.word	0x40000c00
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800
 8003ac4:	40001800 	.word	0x40001800
 8003ac8:	40001c00 	.word	0x40001c00
 8003acc:	40002000 	.word	0x40002000

08003ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f023 0302 	bic.w	r3, r3, #2
 8003b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <TIM_OC1_SetConfig+0xd8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_OC1_SetConfig+0x64>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <TIM_OC1_SetConfig+0xdc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10c      	bne.n	8003b4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0308 	bic.w	r3, r3, #8
 8003b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <TIM_OC1_SetConfig+0xd8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_OC1_SetConfig+0x8e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <TIM_OC1_SetConfig+0xdc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d111      	bne.n	8003b82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40010400 	.word	0x40010400

08003bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0210 	bic.w	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0320 	bic.w	r3, r3, #32
 8003bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <TIM_OC2_SetConfig+0xe4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_OC2_SetConfig+0x68>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <TIM_OC2_SetConfig+0xe8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10d      	bne.n	8003c34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <TIM_OC2_SetConfig+0xe4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC2_SetConfig+0x94>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <TIM_OC2_SetConfig+0xe8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d113      	bne.n	8003c6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40010000 	.word	0x40010000
 8003c98:	40010400 	.word	0x40010400

08003c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <TIM_OC3_SetConfig+0xe0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_OC3_SetConfig+0x66>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <TIM_OC3_SetConfig+0xe4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10d      	bne.n	8003d1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <TIM_OC3_SetConfig+0xe0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_OC3_SetConfig+0x92>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <TIM_OC3_SetConfig+0xe4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d113      	bne.n	8003d56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	621a      	str	r2, [r3, #32]
}
 8003d70:	bf00      	nop
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40010400 	.word	0x40010400

08003d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	031b      	lsls	r3, r3, #12
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <TIM_OC4_SetConfig+0xa4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC4_SetConfig+0x68>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <TIM_OC4_SetConfig+0xa8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d109      	bne.n	8003e00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	019b      	lsls	r3, r3, #6
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40010400 	.word	0x40010400

08003e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0201 	bic.w	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 030a 	bic.w	r3, r3, #10
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b087      	sub	sp, #28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	031b      	lsls	r3, r3, #12
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f043 0307 	orr.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2201      	movs	r2, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e05a      	b.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a21      	ldr	r2, [pc, #132]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d022      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d01d      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d018      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10c      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	4313      	orrs	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40010400 	.word	0x40010400
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40001800 	.word	0x40001800

080040a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e03d      	b.n	8004140 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e03f      	b.n	8004206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fd fd06 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	; 0x24
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f829 	bl	8004210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004214:	b09f      	sub	sp, #124	; 0x7c
 8004216:	af00      	add	r7, sp, #0
 8004218:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	68d9      	ldr	r1, [r3, #12]
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	ea40 0301 	orr.w	r3, r0, r1
 8004230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	431a      	orrs	r2, r3
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	431a      	orrs	r2, r3
 8004242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4313      	orrs	r3, r2
 8004248:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800424a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004254:	f021 010c 	bic.w	r1, r1, #12
 8004258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425e:	430b      	orrs	r3, r1
 8004260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800426c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426e:	6999      	ldr	r1, [r3, #24]
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	ea40 0301 	orr.w	r3, r0, r1
 8004278:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4bc5      	ldr	r3, [pc, #788]	; (8004594 <UART_SetConfig+0x384>)
 8004280:	429a      	cmp	r2, r3
 8004282:	d004      	beq.n	800428e <UART_SetConfig+0x7e>
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4bc3      	ldr	r3, [pc, #780]	; (8004598 <UART_SetConfig+0x388>)
 800428a:	429a      	cmp	r2, r3
 800428c:	d103      	bne.n	8004296 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800428e:	f7fe fa7d 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 8004292:	6778      	str	r0, [r7, #116]	; 0x74
 8004294:	e002      	b.n	800429c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004296:	f7fe fa65 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 800429a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a4:	f040 80b6 	bne.w	8004414 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042aa:	461c      	mov	r4, r3
 80042ac:	f04f 0500 	mov.w	r5, #0
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	1891      	adds	r1, r2, r2
 80042b6:	6439      	str	r1, [r7, #64]	; 0x40
 80042b8:	415b      	adcs	r3, r3
 80042ba:	647b      	str	r3, [r7, #68]	; 0x44
 80042bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042c0:	1912      	adds	r2, r2, r4
 80042c2:	eb45 0303 	adc.w	r3, r5, r3
 80042c6:	f04f 0000 	mov.w	r0, #0
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	00d9      	lsls	r1, r3, #3
 80042d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d4:	00d0      	lsls	r0, r2, #3
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	1911      	adds	r1, r2, r4
 80042dc:	6639      	str	r1, [r7, #96]	; 0x60
 80042de:	416b      	adcs	r3, r5
 80042e0:	667b      	str	r3, [r7, #100]	; 0x64
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	1891      	adds	r1, r2, r2
 80042ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80042f0:	415b      	adcs	r3, r3
 80042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042fc:	f7fb ff82 	bl	8000204 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4ba5      	ldr	r3, [pc, #660]	; (800459c <UART_SetConfig+0x38c>)
 8004306:	fba3 2302 	umull	r2, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	011e      	lsls	r6, r3, #4
 800430e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004310:	461c      	mov	r4, r3
 8004312:	f04f 0500 	mov.w	r5, #0
 8004316:	4622      	mov	r2, r4
 8004318:	462b      	mov	r3, r5
 800431a:	1891      	adds	r1, r2, r2
 800431c:	6339      	str	r1, [r7, #48]	; 0x30
 800431e:	415b      	adcs	r3, r3
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
 8004322:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004326:	1912      	adds	r2, r2, r4
 8004328:	eb45 0303 	adc.w	r3, r5, r3
 800432c:	f04f 0000 	mov.w	r0, #0
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	00d9      	lsls	r1, r3, #3
 8004336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800433a:	00d0      	lsls	r0, r2, #3
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	1911      	adds	r1, r2, r4
 8004342:	65b9      	str	r1, [r7, #88]	; 0x58
 8004344:	416b      	adcs	r3, r5
 8004346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	461a      	mov	r2, r3
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	1891      	adds	r1, r2, r2
 8004354:	62b9      	str	r1, [r7, #40]	; 0x28
 8004356:	415b      	adcs	r3, r3
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004362:	f7fb ff4f 	bl	8000204 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4b8c      	ldr	r3, [pc, #560]	; (800459c <UART_SetConfig+0x38c>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a87      	ldr	r2, [pc, #540]	; (800459c <UART_SetConfig+0x38c>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800438c:	441e      	add	r6, r3
 800438e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004390:	4618      	mov	r0, r3
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	1894      	adds	r4, r2, r2
 800439c:	623c      	str	r4, [r7, #32]
 800439e:	415b      	adcs	r3, r3
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043a6:	1812      	adds	r2, r2, r0
 80043a8:	eb41 0303 	adc.w	r3, r1, r3
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	f04f 0500 	mov.w	r5, #0
 80043b4:	00dd      	lsls	r5, r3, #3
 80043b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ba:	00d4      	lsls	r4, r2, #3
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	1814      	adds	r4, r2, r0
 80043c2:	653c      	str	r4, [r7, #80]	; 0x50
 80043c4:	414b      	adcs	r3, r1
 80043c6:	657b      	str	r3, [r7, #84]	; 0x54
 80043c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	61b9      	str	r1, [r7, #24]
 80043d6:	415b      	adcs	r3, r3
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80043e2:	f7fb ff0f 	bl	8000204 <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4b6c      	ldr	r3, [pc, #432]	; (800459c <UART_SetConfig+0x38c>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a67      	ldr	r2, [pc, #412]	; (800459c <UART_SetConfig+0x38c>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 0207 	and.w	r2, r3, #7
 800440a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4432      	add	r2, r6
 8004410:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004412:	e0b9      	b.n	8004588 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004416:	461c      	mov	r4, r3
 8004418:	f04f 0500 	mov.w	r5, #0
 800441c:	4622      	mov	r2, r4
 800441e:	462b      	mov	r3, r5
 8004420:	1891      	adds	r1, r2, r2
 8004422:	6139      	str	r1, [r7, #16]
 8004424:	415b      	adcs	r3, r3
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800442c:	1912      	adds	r2, r2, r4
 800442e:	eb45 0303 	adc.w	r3, r5, r3
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	00d9      	lsls	r1, r3, #3
 800443c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004440:	00d0      	lsls	r0, r2, #3
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	eb12 0804 	adds.w	r8, r2, r4
 800444a:	eb43 0905 	adc.w	r9, r3, r5
 800444e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4618      	mov	r0, r3
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	008b      	lsls	r3, r1, #2
 8004462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004466:	0082      	lsls	r2, r0, #2
 8004468:	4640      	mov	r0, r8
 800446a:	4649      	mov	r1, r9
 800446c:	f7fb feca 	bl	8000204 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4b49      	ldr	r3, [pc, #292]	; (800459c <UART_SetConfig+0x38c>)
 8004476:	fba3 2302 	umull	r2, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	011e      	lsls	r6, r3, #4
 800447e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004480:	4618      	mov	r0, r3
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	1894      	adds	r4, r2, r2
 800448c:	60bc      	str	r4, [r7, #8]
 800448e:	415b      	adcs	r3, r3
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004496:	1812      	adds	r2, r2, r0
 8004498:	eb41 0303 	adc.w	r3, r1, r3
 800449c:	f04f 0400 	mov.w	r4, #0
 80044a0:	f04f 0500 	mov.w	r5, #0
 80044a4:	00dd      	lsls	r5, r3, #3
 80044a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044aa:	00d4      	lsls	r4, r2, #3
 80044ac:	4622      	mov	r2, r4
 80044ae:	462b      	mov	r3, r5
 80044b0:	1814      	adds	r4, r2, r0
 80044b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80044b4:	414b      	adcs	r3, r1
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4618      	mov	r0, r3
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	008b      	lsls	r3, r1, #2
 80044cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044d0:	0082      	lsls	r2, r0, #2
 80044d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044d6:	f7fb fe95 	bl	8000204 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b2f      	ldr	r3, [pc, #188]	; (800459c <UART_SetConfig+0x38c>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	; 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	3332      	adds	r3, #50	; 0x32
 80044f2:	4a2a      	ldr	r2, [pc, #168]	; (800459c <UART_SetConfig+0x38c>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fe:	441e      	add	r6, r3
 8004500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004502:	4618      	mov	r0, r3
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	1894      	adds	r4, r2, r2
 800450e:	603c      	str	r4, [r7, #0]
 8004510:	415b      	adcs	r3, r3
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004518:	1812      	adds	r2, r2, r0
 800451a:	eb41 0303 	adc.w	r3, r1, r3
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	f04f 0500 	mov.w	r5, #0
 8004526:	00dd      	lsls	r5, r3, #3
 8004528:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800452c:	00d4      	lsls	r4, r2, #3
 800452e:	4622      	mov	r2, r4
 8004530:	462b      	mov	r3, r5
 8004532:	eb12 0a00 	adds.w	sl, r2, r0
 8004536:	eb43 0b01 	adc.w	fp, r3, r1
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4618      	mov	r0, r3
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	008b      	lsls	r3, r1, #2
 800454e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004552:	0082      	lsls	r2, r0, #2
 8004554:	4650      	mov	r0, sl
 8004556:	4659      	mov	r1, fp
 8004558:	f7fb fe54 	bl	8000204 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <UART_SetConfig+0x38c>)
 8004562:	fba3 1302 	umull	r1, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	2164      	movs	r1, #100	; 0x64
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	3332      	adds	r3, #50	; 0x32
 8004574:	4a09      	ldr	r2, [pc, #36]	; (800459c <UART_SetConfig+0x38c>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	f003 020f 	and.w	r2, r3, #15
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4432      	add	r2, r6
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	377c      	adds	r7, #124	; 0x7c
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004592:	bf00      	nop
 8004594:	40011000 	.word	0x40011000
 8004598:	40011400 	.word	0x40011400
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	4d0d      	ldr	r5, [pc, #52]	; (80045d8 <__libc_init_array+0x38>)
 80045a4:	4c0d      	ldr	r4, [pc, #52]	; (80045dc <__libc_init_array+0x3c>)
 80045a6:	1b64      	subs	r4, r4, r5
 80045a8:	10a4      	asrs	r4, r4, #2
 80045aa:	2600      	movs	r6, #0
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	4d0b      	ldr	r5, [pc, #44]	; (80045e0 <__libc_init_array+0x40>)
 80045b2:	4c0c      	ldr	r4, [pc, #48]	; (80045e4 <__libc_init_array+0x44>)
 80045b4:	f000 f87c 	bl	80046b0 <_init>
 80045b8:	1b64      	subs	r4, r4, r5
 80045ba:	10a4      	asrs	r4, r4, #2
 80045bc:	2600      	movs	r6, #0
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	08004834 	.word	0x08004834
 80045dc:	08004834 	.word	0x08004834
 80045e0:	08004834 	.word	0x08004834
 80045e4:	08004838 	.word	0x08004838

080045e8 <__itoa>:
 80045e8:	1e93      	subs	r3, r2, #2
 80045ea:	2b22      	cmp	r3, #34	; 0x22
 80045ec:	b510      	push	{r4, lr}
 80045ee:	460c      	mov	r4, r1
 80045f0:	d904      	bls.n	80045fc <__itoa+0x14>
 80045f2:	2300      	movs	r3, #0
 80045f4:	700b      	strb	r3, [r1, #0]
 80045f6:	461c      	mov	r4, r3
 80045f8:	4620      	mov	r0, r4
 80045fa:	bd10      	pop	{r4, pc}
 80045fc:	2a0a      	cmp	r2, #10
 80045fe:	d109      	bne.n	8004614 <__itoa+0x2c>
 8004600:	2800      	cmp	r0, #0
 8004602:	da07      	bge.n	8004614 <__itoa+0x2c>
 8004604:	232d      	movs	r3, #45	; 0x2d
 8004606:	700b      	strb	r3, [r1, #0]
 8004608:	4240      	negs	r0, r0
 800460a:	2101      	movs	r1, #1
 800460c:	4421      	add	r1, r4
 800460e:	f000 f80d 	bl	800462c <__utoa>
 8004612:	e7f1      	b.n	80045f8 <__itoa+0x10>
 8004614:	2100      	movs	r1, #0
 8004616:	e7f9      	b.n	800460c <__itoa+0x24>

08004618 <itoa>:
 8004618:	f7ff bfe6 	b.w	80045e8 <__itoa>

0800461c <memset>:
 800461c:	4402      	add	r2, r0
 800461e:	4603      	mov	r3, r0
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	f803 1b01 	strb.w	r1, [r3], #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <__utoa>:
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462e:	4c1f      	ldr	r4, [pc, #124]	; (80046ac <__utoa+0x80>)
 8004630:	b08b      	sub	sp, #44	; 0x2c
 8004632:	4605      	mov	r5, r0
 8004634:	460b      	mov	r3, r1
 8004636:	466e      	mov	r6, sp
 8004638:	f104 0c20 	add.w	ip, r4, #32
 800463c:	6820      	ldr	r0, [r4, #0]
 800463e:	6861      	ldr	r1, [r4, #4]
 8004640:	4637      	mov	r7, r6
 8004642:	c703      	stmia	r7!, {r0, r1}
 8004644:	3408      	adds	r4, #8
 8004646:	4564      	cmp	r4, ip
 8004648:	463e      	mov	r6, r7
 800464a:	d1f7      	bne.n	800463c <__utoa+0x10>
 800464c:	7921      	ldrb	r1, [r4, #4]
 800464e:	7139      	strb	r1, [r7, #4]
 8004650:	1e91      	subs	r1, r2, #2
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	6038      	str	r0, [r7, #0]
 8004656:	2922      	cmp	r1, #34	; 0x22
 8004658:	f04f 0100 	mov.w	r1, #0
 800465c:	d904      	bls.n	8004668 <__utoa+0x3c>
 800465e:	7019      	strb	r1, [r3, #0]
 8004660:	460b      	mov	r3, r1
 8004662:	4618      	mov	r0, r3
 8004664:	b00b      	add	sp, #44	; 0x2c
 8004666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004668:	1e58      	subs	r0, r3, #1
 800466a:	4684      	mov	ip, r0
 800466c:	fbb5 f7f2 	udiv	r7, r5, r2
 8004670:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004674:	fb02 5617 	mls	r6, r2, r7, r5
 8004678:	4476      	add	r6, lr
 800467a:	460c      	mov	r4, r1
 800467c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004680:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004684:	462e      	mov	r6, r5
 8004686:	42b2      	cmp	r2, r6
 8004688:	f101 0101 	add.w	r1, r1, #1
 800468c:	463d      	mov	r5, r7
 800468e:	d9ed      	bls.n	800466c <__utoa+0x40>
 8004690:	2200      	movs	r2, #0
 8004692:	545a      	strb	r2, [r3, r1]
 8004694:	1919      	adds	r1, r3, r4
 8004696:	1aa5      	subs	r5, r4, r2
 8004698:	42aa      	cmp	r2, r5
 800469a:	dae2      	bge.n	8004662 <__utoa+0x36>
 800469c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80046a0:	780e      	ldrb	r6, [r1, #0]
 80046a2:	7006      	strb	r6, [r0, #0]
 80046a4:	3201      	adds	r2, #1
 80046a6:	f801 5901 	strb.w	r5, [r1], #-1
 80046aa:	e7f4      	b.n	8004696 <__utoa+0x6a>
 80046ac:	08004804 	.word	0x08004804

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
